<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DSZ</title>
  
  <subtitle>与其临渊羡鱼， 不如退而结网。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-07T03:19:50.878Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>DSZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析设计模式之组合设计模式</title>
    <link href="http://yoursite.com/kawyang/cb2ca9f4.html"/>
    <id>http://yoursite.com/kawyang/cb2ca9f4.html</id>
    <published>2020-07-06T01:19:52.000Z</published>
    <updated>2020-07-07T03:19:50.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式的定义与特点"><a href="#组合模式的定义与特点" class="headerlink" title="组合模式的定义与特点"></a>组合模式的定义与特点</h2><p><strong>组合（Composite）模式的定义：</strong>有时又叫作，它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性。</p><p><strong>组合模式的主要优点有：</strong></p><ol><li><p>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；</p></li><li><p>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；</p></li></ol><a id="more"></a><p><strong>其主要缺点是：</strong></p><ol><li>设计较复杂，客户端需要花更多时间理清类之间的层次关系；</li><li>不容易限制容器中的构件；</li><li>不容易用继承的方法来增加构件的新功能；</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zhms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zhms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树叶构件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"树叶"</span>+name+<span class="string">"：被访问！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zhms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树枝  一个数值构件中包含了多个树叶构件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; children=<span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Object obj:children)</span><br><span class="line">        &#123;</span><br><span class="line">            ((Component)obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zhms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePattern</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Component c0=<span class="keyword">new</span> Composite();</span><br><span class="line">        Component c1=<span class="keyword">new</span> Composite();</span><br><span class="line">        Component leaf1=<span class="keyword">new</span> Leaf(<span class="string">"1"</span>);</span><br><span class="line">        Component leaf2=<span class="keyword">new</span> Leaf(<span class="string">"2"</span>);</span><br><span class="line">        Component leaf3=<span class="keyword">new</span> Leaf(<span class="string">"3"</span>);</span><br><span class="line">        c0.add(leaf1);</span><br><span class="line">        c0.add(c1);</span><br><span class="line">        c1.add(leaf2);</span><br><span class="line">        c1.add(leaf3);</span><br><span class="line">        c0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组合模式的定义与特点&quot;&gt;&lt;a href=&quot;#组合模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;组合模式的定义与特点&quot;&gt;&lt;/a&gt;组合模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;组合（Composite）模式的定义：&lt;/strong&gt;有时又叫作，它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;组合模式的主要优点有：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之享元设计模式</title>
    <link href="http://yoursite.com/kawyang/3a014e30.html"/>
    <id>http://yoursite.com/kawyang/3a014e30.html</id>
    <published>2020-07-06T01:19:40.000Z</published>
    <updated>2020-07-07T03:18:40.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式的定义与特点"><a href="#享元模式的定义与特点" class="headerlink" title="享元模式的定义与特点"></a>享元模式的定义与特点</h2><p>享元（Flyweight）模式的定义：运用共享技术来有効地支持大量细粒度对象的复用。它通过共享已经存在的又橡来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。</p><p>享元模式的主要优点是：相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p><a id="more"></a><p>其主要缺点是：</p><ol><li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li><li>读取享元模式的外部状态会使得运行时间稍微变长。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.xyms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsharedConcreteFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.xyms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight state)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.xyms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        System.out.println(<span class="string">"key被创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight state)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"具体享元"</span>+key+<span class="string">"被调用，"</span>);</span><br><span class="line">        System.out.println(<span class="string">"非享元信息是:"</span>+state.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.xyms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Flyweight&gt;  flyweights = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        Flyweight flyweight = flyweights.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flyweight != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(key+<span class="string">"已存在并且被成功获取！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            flyweights.put(key,flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.xyms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightPattern</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FlyweightFactory factory=<span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight f01=factory.getFlyweight(<span class="string">"a"</span>);</span><br><span class="line">        Flyweight f02=factory.getFlyweight(<span class="string">"a"</span>);</span><br><span class="line">        Flyweight f03=factory.getFlyweight(<span class="string">"a"</span>);</span><br><span class="line">        Flyweight f11=factory.getFlyweight(<span class="string">"b"</span>);</span><br><span class="line">        Flyweight f12=factory.getFlyweight(<span class="string">"b"</span>);</span><br><span class="line">        f01.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"第1次调用a。"</span>));</span><br><span class="line">        f02.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"第2次调用a。"</span>));</span><br><span class="line">        f03.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"第3次调用a。"</span>));</span><br><span class="line">        f11.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"第1次调用b。"</span>));</span><br><span class="line">        f12.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">"第2次调用b。"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;享元模式的定义与特点&quot;&gt;&lt;a href=&quot;#享元模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;享元模式的定义与特点&quot;&gt;&lt;/a&gt;享元模式的定义与特点&lt;/h2&gt;&lt;p&gt;享元（Flyweight）模式的定义：运用共享技术来有効地支持大量细粒度对象的复用。它通过共享已经存在的又橡来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。&lt;/p&gt;&lt;p&gt;享元模式的主要优点是：相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之外观设计模式</title>
    <link href="http://yoursite.com/kawyang/76e6897c.html"/>
    <id>http://yoursite.com/kawyang/76e6897c.html</id>
    <published>2020-07-06T01:19:08.000Z</published>
    <updated>2020-07-07T03:19:42.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式的定义与特点"><a href="#外观模式的定义与特点" class="headerlink" title="外观模式的定义与特点"></a>外观模式的定义与特点</h2><p><strong>外观（Facade）模式的定义：</strong>是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p><strong>外观（Facade）模式是“迪米特法则”的典型应用，它有以下主要优点。</strong></p><a id="more"></a><ol><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li><li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li></ol><p><strong>外观（Facade）模式的主要缺点如下。</strong></p><ol><li><p>不能很好地限制客户使用子系统类。</p></li><li><p>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</p></li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSZA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统A的一个方法被调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.wgms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统B</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSZB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统B的一个方法被调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.wgms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统C</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSZC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统C的一个方法被调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.wgms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观聚合类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DSZA dsza = <span class="keyword">new</span> DSZA();</span><br><span class="line">    <span class="keyword">private</span> DSZB dszb = <span class="keyword">new</span> DSZB();</span><br><span class="line">    <span class="keyword">private</span> DSZC dszc = <span class="keyword">new</span> DSZC();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dsza.method();</span><br><span class="line">        dszb.method();</span><br><span class="line">        dszc.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.wgms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePattern</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Facade f=<span class="keyword">new</span> Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;外观模式的定义与特点&quot;&gt;&lt;a href=&quot;#外观模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;外观模式的定义与特点&quot;&gt;&lt;/a&gt;外观模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;外观（Facade）模式的定义：&lt;/strong&gt;是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;外观（Facade）模式是“迪米特法则”的典型应用，它有以下主要优点。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之装饰设计模式</title>
    <link href="http://yoursite.com/kawyang/5580f791.html"/>
    <id>http://yoursite.com/kawyang/5580f791.html</id>
    <published>2020-07-06T01:19:01.000Z</published>
    <updated>2020-07-07T03:18:30.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰模式的定义与特点"><a href="#装饰模式的定义与特点" class="headerlink" title="装饰模式的定义与特点"></a>装饰模式的定义与特点</h2><p><strong>装饰（Decorator）模式的定义：</strong>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。</p><p><strong>装饰（Decorator）模式的主要优点有：</strong></p><ul><li>采用装饰模式扩展对象的功能比采用继承方式更加灵活。</li><li>可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。</li></ul><a id="more"></a><p><strong>其主要缺点是：</strong>装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zsms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务类接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zsms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务类实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteComponent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建具体构件角色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用具体构件角色的方法operation()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.dszmr.sjms.zsms;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拓展抽象类</span><br><span class="line"> */</span><br><span class="line">public abstract class Decorator implements Component&#123;</span><br><span class="line">    private Component component;</span><br><span class="line"></span><br><span class="line">    public Decorator(Component component) &#123;</span><br><span class="line">        this.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void operation() &#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zsms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓展类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        addedFunction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addedFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为具体构件角色增加额外的功能addedFunction()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.zsms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorPattern</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Component p=<span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">        p.operation();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">        Component d=<span class="keyword">new</span> ConcreteDecorator(p);</span><br><span class="line">        d.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装饰模式的定义与特点&quot;&gt;&lt;a href=&quot;#装饰模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;装饰模式的定义与特点&quot;&gt;&lt;/a&gt;装饰模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;装饰（Decorator）模式的定义：&lt;/strong&gt;指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;装饰（Decorator）模式的主要优点有：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;采用装饰模式扩展对象的功能比采用继承方式更加灵活。&lt;/li&gt;
&lt;li&gt;可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之桥接设计模式</title>
    <link href="http://yoursite.com/kawyang/f0529bc3.html"/>
    <id>http://yoursite.com/kawyang/f0529bc3.html</id>
    <published>2020-07-06T01:18:50.000Z</published>
    <updated>2020-07-07T03:19:33.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式的定义与特点"><a href="#桥接模式的定义与特点" class="headerlink" title="桥接模式的定义与特点"></a>桥接模式的定义与特点</h2><p><strong>桥接（Bridge）模式的定义如下：</strong>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。<br><strong>桥接（Bridge）模式的优点是：</strong></p><ul><li>由于抽象与实现分离，所以扩展能力强；</li><li>其实现细节对客户透明。</li></ul><p><strong>缺点是：</strong>由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.qjms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓展接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.qjms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始业务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这里是业务代码a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.qjms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象化拓展类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    Implementor impl ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(Implementor impl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.impl = impl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.qjms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拓展类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor impl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(impl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这个是对业务代码进行的拓展"</span>);</span><br><span class="line">        impl.OperationImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.qjms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Implementor imple=<span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line">        Abstraction abs=<span class="keyword">new</span> RefinedAbstraction(imple);</span><br><span class="line">        abs.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;桥接模式的定义与特点&quot;&gt;&lt;a href=&quot;#桥接模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;桥接模式的定义与特点&quot;&gt;&lt;/a&gt;桥接模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;桥接（Bridge）模式的定义如下：&lt;/strong&gt;将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。&lt;br&gt;&lt;strong&gt;桥接（Bridge）模式的优点是：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;由于抽象与实现分离，所以扩展能力强；&lt;/li&gt;
&lt;li&gt;其实现细节对客户透明。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;缺点是：&lt;/strong&gt;由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之适配器设计模式</title>
    <link href="http://yoursite.com/kawyang/342dc42e.html"/>
    <id>http://yoursite.com/kawyang/342dc42e.html</id>
    <published>2020-07-06T01:18:41.000Z</published>
    <updated>2020-07-07T03:18:22.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p><strong>适配器模式（Adapter）的定义如下：</strong>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。<br>该模式的主要优点如下。</p><ul><li>客户端通过适配器可以透明地调用目标接口。</li><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。</li><li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li></ul><a id="more"></a><p>其缺点是：对类适配器来说，更换适配器的实现过程比较复杂</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现非常简单，就是定义一个适配者类，让业务类继承或者创建一个适配者类，然后在业务方法中调用适配者类中的一个方法，这样以后修改就只需要去修改适配器的代码即可，可以尽量的避免去修改业务类代码。</p><p>业务类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.spqms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.spqms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"适配器的代码被调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.spqms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> <span class="keyword">extends</span>  <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.spqms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapterTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类适配器模式测试："</span>);</span><br><span class="line">        Target target = <span class="keyword">new</span> ClassAdapter();</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;适配器模式（Adapter）的定义如下：&lt;/strong&gt;将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。&lt;br&gt;该模式的主要优点如下。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;客户端通过适配器可以透明地调用目标接口。&lt;/li&gt;
&lt;li&gt;复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。&lt;/li&gt;
&lt;li&gt;将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之代理设计模式</title>
    <link href="http://yoursite.com/kawyang/990c4abf.html"/>
    <id>http://yoursite.com/kawyang/990c4abf.html</id>
    <published>2020-07-06T01:18:34.000Z</published>
    <updated>2020-07-07T03:19:10.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式的定义与特点"><a href="#代理模式的定义与特点" class="headerlink" title="代理模式的定义与特点"></a>代理模式的定义与特点</h2><p>代理模式的定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>代理模式的主要优点有：</p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><a id="more"></a><p>代理模式的主要优点有：</p><ul><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li><li>增加了系统的复杂度；</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dailims;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问主题方法体......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dailims;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问真实主题之前的预处理。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"访问真实主题之后的后续处理。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            realSubject=<span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        preRequest();</span><br><span class="line">        realSubject.request();</span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dailims;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy=<span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代理模式的定义与特点&quot;&gt;&lt;a href=&quot;#代理模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;代理模式的定义与特点&quot;&gt;&lt;/a&gt;代理模式的定义与特点&lt;/h2&gt;&lt;p&gt;代理模式的定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。&lt;/p&gt;&lt;p&gt;代理模式的主要优点有：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；&lt;/li&gt;
&lt;li&gt;代理对象可以扩展目标对象的功能；&lt;/li&gt;
&lt;li&gt;代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之建造者设计模式</title>
    <link href="http://yoursite.com/kawyang/dd6ab62d.html"/>
    <id>http://yoursite.com/kawyang/dd6ab62d.html</id>
    <published>2020-07-06T01:18:22.000Z</published>
    <updated>2020-07-07T03:18:10.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p><strong>建造者（Builder）模式的定义：</strong>指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p><p><strong>该模式的主要优点如下：</strong></p><a id="more"></a><ol><li>各个具体的建造者相互独立，有利于系统的扩展。</li><li>客户端不必知道产品内部组成的细节，便于控制细节风险。</li></ol><p><strong>其缺点如下：</strong></p><ol><li>产品的组成部分必须相同，这限制了其使用范围。</li><li>如果产品的内部变化复杂，该模式会增加很多的建造者类。</li></ol><p><strong>建造者（Builder）模式和工厂模式的关注点不同：</strong>建造者模式注重零部件的组装过程，而更注重零部件的创建过程，但两者可以结合使用。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.jzzms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品角色：包含多个组成部件的复杂对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Preson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="keyword">private</span> String foot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(String head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(String body)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoot</span><span class="params">(String foot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foot = foot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这个人他有一个"</span>+head+<span class="string">",他还有一个"</span>+body+<span class="string">",他也有一双"</span>+foot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.jzzms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象建造者：包含创建产品各个子部件的抽象方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Preson preson = <span class="keyword">new</span> Preson();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">body</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">foot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Preson <span class="title">getPreson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.jzzms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体建造者：实现了抽象建造者接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preson.setHead(<span class="string">"大头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">body</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preson.setBody(<span class="string">"啤酒杯"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preson.setFoot(<span class="string">"肥猪蹄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.jzzms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.sjms.kdgcms.Product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指挥者：调用建造者中的方法完成复杂对象的创建。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Preson <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.head();</span><br><span class="line">        builder.body();</span><br><span class="line">        builder.foot();</span><br><span class="line">        <span class="keyword">return</span> builder.getPreson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.jzzms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Builder concreteBuilder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(concreteBuilder);</span><br><span class="line">        Preson construct = director.construct();</span><br><span class="line">        construct.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;建造者（Builder）模式的定义：&lt;/strong&gt;指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;该模式的主要优点如下：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之抽象工厂设计模式</title>
    <link href="http://yoursite.com/kawyang/e2787a47.html"/>
    <id>http://yoursite.com/kawyang/e2787a47.html</id>
    <published>2020-07-06T01:17:22.000Z</published>
    <updated>2020-07-07T03:19:01.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p><strong>抽象工厂（AbstractFactory）模式的定义：</strong>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>使用抽象工厂模式一般要满足以下条件。</p><ul><li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li><li>当增加一个新的产品族时不需要修改原代码，满足开闭原则。</li></ul><a id="more"></a><p>抽象工厂模式除了具有工厂方法模式的优点外，其他主要优点如下。</p><ul><li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li><li>当增加一个新的产品族时不需要修改原代码，满足开闭原则。</li></ul><p>其缺点是：当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>其大概逻辑就是将原本简单工厂的只有创建一种对象 改变成了能创建一个种族的所有对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.cxgcms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.sjms.kdgcms.Car;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.sjms.kdgcms.Cat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">newCar</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Cat <span class="title">newCat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.cxgcms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.sjms.kdgcms.Car;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.sjms.kdgcms.Cat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">newCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">newCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;抽象工厂（AbstractFactory）模式的定义：&lt;/strong&gt;是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。&lt;/p&gt;&lt;p&gt;使用抽象工厂模式一般要满足以下条件。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。&lt;/li&gt;
&lt;li&gt;当增加一个新的产品族时不需要修改原代码，满足开闭原则。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之工厂方法设计模式</title>
    <link href="http://yoursite.com/kawyang/5fd6ffe3.html"/>
    <id>http://yoursite.com/kawyang/5fd6ffe3.html</id>
    <published>2020-07-06T01:17:14.000Z</published>
    <updated>2020-07-07T03:18:00.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p><strong>工厂方法（FactoryMethod）模式的定义：</strong>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。<br>如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”，它不属于 GoF 的 23 种经典<span class="exturl" data-url="aHR0cDovL2MuYmlhbmNoZW5nLm5ldC9kZXNpZ25fcGF0dGVybi8=" title="http://c.biancheng.net/design_pattern/">设计模式<i class="fa fa-external-link"></i></span>，它的缺点是增加新产品时会违背“开闭原则”。</p><a id="more"></a><p><strong>工厂方法模式的主要优点有：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>其缺点是：</strong>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>抽象父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果业务需要添加一个car的商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实现类</span></span><br><span class="line"><span class="comment"> * 具体类2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is car"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果还需要添加一个cat的商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实现类</span></span><br><span class="line"><span class="comment"> * 具体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is cat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatFactory</span> <span class="keyword">implements</span>  <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话并未对原有代码进行修改 但是也完成了业务需求 符合开闭原则</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.kdgcms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       CatFactory catFactory = <span class="keyword">new</span> CatFactory();</span><br><span class="line">       CarFactory carFactory = <span class="keyword">new</span> CarFactory();</span><br><span class="line"></span><br><span class="line">       System.out.println(carFactory.newProduct());</span><br><span class="line">       System.out.println(catFactory.newProduct());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;工厂方法（FactoryMethod）模式的定义：&lt;/strong&gt;定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。&lt;br&gt;如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”，它不属于 GoF 的 23 种经典&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC9kZXNpZ25fcGF0dGVybi8=&quot; title=&quot;http://c.biancheng.net/design_pattern/&quot;&gt;设计模式&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;，它的缺点是增加新产品时会违背“开闭原则”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之原型设计模式</title>
    <link href="http://yoursite.com/kawyang/c909a911.html"/>
    <id>http://yoursite.com/kawyang/c909a911.html</id>
    <published>2020-07-06T01:17:01.000Z</published>
    <updated>2020-07-07T03:18:52.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式的定义与特点"><a href="#原型模式的定义与特点" class="headerlink" title="原型模式的定义与特点"></a>原型模式的定义与特点</h2><p><strong>原型（Prototype）模式的定义如下</strong>：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。在有的时候需要重新创建个对象时，无疑使用原型模式会显得更加的便捷。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.yxms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuanxing</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Yuanxing <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Yuanxing) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Yuanxing yuanxing = <span class="keyword">new</span> Yuanxing();</span><br><span class="line">        yuanxing.setLabel(<span class="string">"dsz"</span>);</span><br><span class="line"></span><br><span class="line">        Yuanxing clone = yuanxing.clone();</span><br><span class="line"></span><br><span class="line">        String label = yuanxing.getLabel();</span><br><span class="line">        String label1 = clone.getLabel();</span><br><span class="line"></span><br><span class="line">        System.out.println(label.equals(label1)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(clone==yuanxing); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型模式的定义与特点&quot;&gt;&lt;a href=&quot;#原型模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;原型模式的定义与特点&quot;&gt;&lt;/a&gt;原型模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原型（Prototype）模式的定义如下&lt;/strong&gt;：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。在有的时候需要重新创建个对象时，无疑使用原型模式会显得更加的便捷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式之单例设计模式</title>
    <link href="http://yoursite.com/kawyang/1abfeb89.html"/>
    <id>http://yoursite.com/kawyang/1abfeb89.html</id>
    <published>2020-07-06T01:16:49.000Z</published>
    <updated>2020-07-07T03:17:50.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式的定义与特点"><a href="#单例模式的定义与特点" class="headerlink" title="单例模式的定义与特点"></a>单例模式的定义与特点</h2><p><strong>单例（Singleton）模式的定义：</strong>指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。<br>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p><a id="more"></a><ol><li>单例类只有一个实例对象；</li><li>该单例对象必须由单例类自行创建；</li><li>单例类对外提供一个访问该单例的全局访问点；</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dlms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Langhan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Langhan langhan = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Langhan</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Langhan <span class="title">getLanghan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (langhan == <span class="keyword">null</span>)</span><br><span class="line">            langhan = <span class="keyword">new</span> Langhan();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> langhan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dlms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Erhan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Erhan erhan = <span class="keyword">new</span> Erhan();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Erhan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Erhan <span class="title">getErhan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> erhan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.sjms.dlms;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Erhan erhan = Erhan.getErhan();</span><br><span class="line">        Langhan langhan = Langhan.getLanghan();</span><br><span class="line">        System.out.println(erhan);</span><br><span class="line">        System.out.println(langhan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式的定义与特点&quot;&gt;&lt;a href=&quot;#单例模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;单例模式的定义与特点&quot;&gt;&lt;/a&gt;单例模式的定义与特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单例（Singleton）模式的定义：&lt;/strong&gt;指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。&lt;br&gt;在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>简单实践spring框架(手写spring)</title>
    <link href="http://yoursite.com/kawyang/8da23d78.html"/>
    <id>http://yoursite.com/kawyang/8da23d78.html</id>
    <published>2020-06-09T08:30:19.000Z</published>
    <updated>2020-07-07T03:17:20.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-IOC篇"><a href="#Spring-IOC篇" class="headerlink" title="Spring-IOC篇"></a>Spring-IOC篇</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    我们认识的Spring-IOC 无非就是在类上加一个    @Component,@Service,@Controller,@Repository这些注解，这样就代表了将这个类或者说对象交给了spring管理，由spring为我们创建对象，而我们只需要在其他的类的成员位置定义该对象的对象名并在其上面加上@Resource或者@Autowired注解，spring便会自动的把我们所需要的值注入进去了，我们直接调用即可。这看似简单的却又神奇的操作，你又有没有想过spring是怎么实现的呢？</p><a id="more"></a><h3 id="IOC注入流程"><a href="#IOC注入流程" class="headerlink" title="IOC注入流程"></a>IOC注入流程</h3><p>流程大致分为五步</p><ol><li>读取配置文件获取文件根路径</li><li>通过根路径获取所有类</li><li>为这些类创建对象</li><li>扫描获取需要注入的对象</li><li>通过反射为类注入对象</li></ol><h3 id="手动实现IOC"><a href="#手动实现IOC" class="headerlink" title="手动实现IOC"></a>手动实现IOC</h3><p><strong>既然知道了流程那么就话不多说来实现一下spring的ioc</strong></p><p>首先需要做一些基础的准备工作也就是定义注解。</p><p>需要用到的注解</p><p>​        <strong>@Component,@Service,@Controller,@Repository,@Autowired</strong></p><p>我这里为了简便就不进行@Component和@Repository的定义了</p><p>@Service 在这里用注释简单介绍了一下参数的意思 后面将不在介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单参数介绍</span></span><br><span class="line"><span class="comment"> * ElementType.TYPE   在类上定义</span></span><br><span class="line"><span class="comment"> * ElementType.FIELD 在成员字段上定义</span></span><br><span class="line"><span class="comment"> * ElementType.METHOD 在方法上定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单参数介绍</span></span><br><span class="line"><span class="comment"> * RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；</span></span><br><span class="line"><span class="comment"> * RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；</span></span><br><span class="line"><span class="comment"> * RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * autowired</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义好注解以后就可以进行第一步操作了 </p><p>​         读取配置文件获取文件根路径</p><p>这一步的具体步骤就是去你的项目加载指定目录下去获取一个指定文件名的文件，也就是properties配置文件，然后解析这个配置文件获取里面的配置项为我们项目加载所用。</p><p>首先我们需要一个类来进行固定配置名的约束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固定配置项</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigConstant</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java源码地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String APP_BASE_PACKAGE = <span class="string">"dsz.framework.app.base_package"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态资源路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String APP_ASSET_PATH = <span class="string">"dsz.framework.app.asset_path"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String CONFIG_FILE = <span class="string">"dsz.properties"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要一个工具类来读取properties文件内容</p><p>具体逻辑就是给定一个文件路径 然后读取该文件 把它读取至properties集合容器中</p><blockquote><p>需要添加一个日志包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 道具跑龙套</span></span><br><span class="line"><span class="comment"> * 配置文件工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PropsUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志记录器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PropsUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载的道具</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Properties&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">loadProps</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        Properties  properties = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is =  <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is =  Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);</span><br><span class="line">            <span class="keyword">if</span> (is == <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(fileName+<span class="string">"文件不存在，请检查路径?"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            LOGGER.error(<span class="string">"读取文件错误！"</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"文件流关流失败！"</span>,e);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                LOGGER.info(fileName+<span class="string">"文件读取成功，正在进行下一步！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Properties properties,String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getString(properties, key,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到字符串</span></span><br><span class="line"><span class="comment">     * 获取string类型的值 默认为空字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value      价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Properties properties,String key,String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (properties.containsKey(key))&#123;</span><br><span class="line">            value = properties.getProperty(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布尔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(Properties properties,String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBoolean(properties, key,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布尔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value      价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(Properties properties,String key,<span class="keyword">boolean</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (properties.containsKey(key))&#123;</span><br><span class="line">            value = Boolean.parseBoolean(properties.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Properties properties,String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInt(properties, key,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value      价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Properties properties,String key,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (properties.containsKey(key))&#123;</span><br><span class="line">            value = Integer.parseInt(properties.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再结合工具类和基本名称的定义获取到对应的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.ConfigConstant;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.PropsUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置助手</span></span><br><span class="line"><span class="comment"> * 设计及其助手</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties PROPERTIES = PropsUtil.loadProps(ConfigConstant.CONFIG_FILE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得基础包</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBasePackage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PropsUtil.getString(PROPERTIES,ConfigConstant.APP_BASE_PACKAGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PropsUtil.getString(PROPERTIES,key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布尔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PropsUtil.getBoolean(PROPERTIES,key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PropsUtil.getInt(PROPERTIES,key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以通过调用ConfigHelper的静态方法去获取对应配置属性了</p><p>好了继续下一步</p><p>​            通过根路径获取所有类</p><blockquote><p>添加工具包这样操作更加的简便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用工具包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--集合工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>具体逻辑是 获取类加载器 通过类加载器与设置好的根路径获取文件父包 进行扫描 如果为普通文件或者文件夹则进行递归扫描 如果为jar则开包获取所有.class文件 并获取出所有类对象并添加类对象至集合内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dszmr.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.JarURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载class工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ClassUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程类加载器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isInitialized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className,<span class="keyword">boolean</span> isInitialized)&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aClass = Class.forName(className, isInitialized, getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"这个类读取不到"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> aClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取指定类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className)&#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(className,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有bean类的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClassSet(String packageName)&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; classSet = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        <span class="comment">//通过类加载器 获取包的根路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取类加载器</span></span><br><span class="line">            ClassLoader classLoader = getClassLoader();</span><br><span class="line">            <span class="comment">//把指定根路径包名替换成路径 也就是把.替换成\</span></span><br><span class="line">            String s = packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"\\\\"</span>);</span><br><span class="line">            <span class="comment">//通过类加载器去扫描该路径 获取出该路径下所有文件集合</span></span><br><span class="line">            Enumeration&lt;URL&gt; resources = classLoader.getResources(s);</span><br><span class="line">            <span class="comment">//循环迭代获取所有路径</span></span><br><span class="line">            <span class="keyword">while</span> (resources.hasMoreElements())&#123;</span><br><span class="line">                URL url = resources.nextElement();</span><br><span class="line">                <span class="keyword">if</span> (url!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//判断文件类型如果是普通文件</span></span><br><span class="line">                    String protocol = url.getProtocol();</span><br><span class="line">                    <span class="keyword">if</span> (protocol.equals(<span class="string">"file"</span>))&#123;</span><br><span class="line">                        String packagePath = url.getPath().replaceAll(<span class="string">"%20"</span>, <span class="string">" "</span>);</span><br><span class="line">                        <span class="comment">//递归扫描但前路径下所有文件</span></span><br><span class="line">                        addClass(classSet,packagePath,packageName);</span><br><span class="line">                        <span class="comment">//如果是jar包则开包进行扫描</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (protocol.equals(<span class="string">"jar"</span>))&#123;</span><br><span class="line">                        <span class="comment">//获取jar路径连接对象</span></span><br><span class="line">                        JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();</span><br><span class="line">                        <span class="keyword">if</span> (jarURLConnection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                            <span class="comment">//获取jar内所有文件</span></span><br><span class="line">                            JarFile jarFile = jarURLConnection.getJarFile();</span><br><span class="line">                            <span class="keyword">if</span> (jarFile!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                                <span class="comment">//迭代文件</span></span><br><span class="line">                                Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</span><br><span class="line">                                <span class="keyword">while</span> (entries.hasMoreElements())&#123;</span><br><span class="line">                                    JarEntry jarEntry = entries.nextElement();</span><br><span class="line">                                    <span class="comment">//加载所有.class文件</span></span><br><span class="line">                                    String jarEntryName = jarEntry.getName();</span><br><span class="line">                                    <span class="keyword">if</span> (jarEntryName.endsWith(<span class="string">".class"</span>))&#123;</span><br><span class="line">                                        jarEntryName = jarEntryName.substring(<span class="number">0</span>,jarEntryName.indexOf(<span class="string">"."</span>)).replaceAll(<span class="string">"/"</span>,<span class="string">"."</span>);</span><br><span class="line">                                        doAddClass(classSet,jarEntryName);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"读取文件出现问题"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归遍历所有文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packagePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addClass</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; classSet,String packagePath,String packageName)</span></span>&#123;</span><br><span class="line">       <span class="comment">//过滤文件 只读取class文件 或者文件夹</span></span><br><span class="line">        File[] files = <span class="keyword">new</span> File(packagePath).listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.isFile() ? pathname.getName().endsWith(<span class="string">".class"</span>) : pathname.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//是文件则添加进集合容器中</span></span><br><span class="line">            String fileName = file.getName();</span><br><span class="line">            <span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line">                <span class="comment">//编辑类路径全名添加至集合容器</span></span><br><span class="line">                String className = fileName.substring(<span class="number">0</span>, fileName.indexOf(<span class="string">"."</span>));</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(packageName))&#123;</span><br><span class="line">                   className = packageName+<span class="string">"."</span>+className;</span><br><span class="line">                &#125;</span><br><span class="line">                doAddClass(classSet,className);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//是文件夹则进行再次递归读取</span></span><br><span class="line">                String subFilePath = fileName;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(packagePath))&#123;</span><br><span class="line">                    subFilePath = packagePath + <span class="string">"/"</span> + subFilePath;</span><br><span class="line">                &#125;</span><br><span class="line">                String subFileName = fileName;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(packageName))&#123;</span><br><span class="line">                    subFileName = packageName + <span class="string">"."</span>+subFileName;</span><br><span class="line">                &#125;</span><br><span class="line">                 addClass(classSet,subFilePath,subFileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把文件添加至集合容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doAddClass</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; classSet,String className)</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过类路径获取类对象 将类对象添加至集合容器</span></span><br><span class="line">        Class&lt;?&gt; aClass = loadClass(className, <span class="keyword">false</span>);</span><br><span class="line">        classSet.add(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道spring只会加载被他的注解所修饰的类 而我们定义的工具类的功能是获取所有类 这样我们需要再次定义一个辅助类去筛选出需要注入和被注入的类</p><p>具体逻辑为通过ConfigHelper去获取当前根类 再传入ClassUtil去获取所有类的集合 再定义方法进行各种筛选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.ClassUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; CLASS_SET ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//获取根路径包</span></span><br><span class="line">        String basePackage = ConfigHelper.getBasePackage();</span><br><span class="line">        <span class="comment">//调用工具类获取项目下的所有类</span></span><br><span class="line">        CLASS_SET = ClassUtil.getClassSet(basePackage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClassSet()&#123;</span><br><span class="line">        <span class="keyword">return</span> CLASS_SET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被service修饰的类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getServiceClassSet()&#123;</span><br><span class="line">        HashSet&lt;Class&lt;?&gt;&gt; classHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : CLASS_SET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aClass.isAnnotationPresent(Service<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                classHashSet.add(aClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classHashSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被controller修饰的类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getControllerClassSet()&#123;</span><br><span class="line">        HashSet&lt;Class&lt;?&gt;&gt; classHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : CLASS_SET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aClass.isAnnotationPresent(Controller<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                classHashSet.add(aClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classHashSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有bean类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getBeanClassSet()&#123;</span><br><span class="line">        HashSet&lt;Class&lt;?&gt;&gt; classHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        classHashSet.addAll(getServiceClassSet());</span><br><span class="line">        classHashSet.addAll(getControllerClassSet());</span><br><span class="line">        <span class="keyword">return</span> classHashSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取但前类子类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superClass 超类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClassSetBySuper(Class&lt;?&gt; superClass)&#123;</span><br><span class="line">        HashSet&lt;Class&lt;?&gt;&gt; classHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : CLASS_SET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (superClass.isAssignableFrom(aClass)&amp;&amp;!superClass.equals(aClass))&#123;</span><br><span class="line">                classHashSet.add(aClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classHashSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取带有注释的类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotationClass 注释类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Set&lt;Class&lt;?&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClassSetByAnnotation(Class&lt;? extends Annotation&gt; annotationClass)&#123;</span><br><span class="line">        HashSet&lt;Class&lt;?&gt;&gt; classHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : CLASS_SET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aClass.isAnnotationPresent(annotationClass))&#123;</span><br><span class="line">                classHashSet.add(aClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classHashSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在获取到了所有对应的所有bean类  现在我们只需要将其进行反射为有对应注解的类进行注入属性</p><p>既然要使用反射操作 为了避免代码重复 我们将反射的基本操作封装成一个工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志记录器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ReflectionUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = cls.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"创建类实例失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; cls = ClassUtil.loadClass(className);</span><br><span class="line">        <span class="keyword">return</span> newInstance(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj    obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   arg游戏</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(Object obj, Method method, Object... args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = method.invoke(obj, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"调用"</span> + obj + <span class="string">"方法失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj   obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 场</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Object obj, Field field, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"修改"</span> + obj + <span class="string">"属性失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring-IOC 最核心的地方可能就是那个存着所有bean的大map了 键为类对象 值为对应的对象想要可以直接通过类对象获取对象 大大简便了操作 既然classHelper为我们提供了所有的bean的类对象 那么定义出这个bean map 是不是就显得很简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.ReflectionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bean助手</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;,Object&gt; BEAN_MAP = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;,Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; beanClassSet = ClassHelper.getBeanClassSet();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : beanClassSet) &#123;</span><br><span class="line">            Object o = ReflectionUtil.newInstance(aClass);</span><br><span class="line">            BEAN_MAP.put(aClass,o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到bean映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Map&lt;Class&lt;?&gt;, Object&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;,Object&gt; getBeanMap()&#123;</span><br><span class="line">        <span class="keyword">return</span> BEAN_MAP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到baen</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBaen</span><span class="params">(Class&lt;T&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!BEAN_MAP.containsKey(cls))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"你获取的"</span> + cls + <span class="string">"在Bean容器内不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) BEAN_MAP.get(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o   o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBean</span><span class="params">(Class&lt;?&gt; cls,Object o)</span></span>&#123;</span><br><span class="line">        BEAN_MAP.put(cls,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在把所有的bean都转载到了beanmap内 但是类上带有Autowired注解的还未进行注入操作</p><p>定义IocHelper进行注入操作 逻辑为 获取所有bean 进行迭代遍历 获取对应的字段 获取字段上有Autowired注解的bean 然后为其进行注入对象属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.ReflectionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.MapUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 国际奥委会助手</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IocHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//取到beanMap</span></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Object&gt; beanMap = BeanHelper.getBeanMap();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(beanMap))&#123;</span><br><span class="line">            <span class="comment">//进行迭代</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; classObjectEntry : beanMap.entrySet()) &#123;</span><br><span class="line">                Class&lt;?&gt; cls = classObjectEntry.getKey();</span><br><span class="line">                Object o = classObjectEntry.getValue();</span><br><span class="line">                <span class="comment">//获取所有字段 遍历</span></span><br><span class="line">                Field[] fields = cls.getDeclaredFields();</span><br><span class="line">                <span class="keyword">if</span> (ArrayUtils.isNotEmpty(fields))&#123;</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="comment">//判断字段上是否有Autowired注解</span></span><br><span class="line">                    <span class="keyword">if</span> (field.isAnnotationPresent(Autowired<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                        <span class="comment">//获取其子类 类对象</span></span><br><span class="line">                        Class&lt;?&gt; superClass = findImplementClass(field.getType());</span><br><span class="line">                        <span class="comment">//从bean工厂获取对象</span></span><br><span class="line">                        Object obj = beanMap.get(superClass);</span><br><span class="line">                        <span class="keyword">if</span> (obj !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                            <span class="comment">//反射写入字段中</span></span><br><span class="line">                            ReflectionUtil.setField(o,field,obj);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到实现类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Class&lt;?&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; findImplementClass(Class&lt;?&gt; cls)&#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; classSetBySuper = ClassHelper.getClassSetBySuper(cls);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(classSetBySuper))&#123;</span><br><span class="line">            cls = classSetBySuper.iterator().next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这一步一个简单的拥有ioc功能的框架就搭建成功了</p><p>我们可以定义测试类进行一个简单的测试</p><p>在此之前我们需要让tomcat在加载的时候会去加载我们ioc容器</p><p>所以我们需要定义一个初始化加载类 然后继承HTTPServlet 利用servlet的init方法进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.load;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.helper.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.helper.ClassHelper;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.helper.IocHelper;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.utils.ClassUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助装载机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dsz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HelperLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] classes = &#123;</span><br><span class="line">                ClassHelper<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">BeanHelper</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">IocHelper</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        &#125;</span>;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : classes) &#123;</span><br><span class="line">            ClassUtil.loadClass(aClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为要使用到servlet所以需要添加servlet相关依赖</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.load.HelperLoader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Initservlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        HelperLoader.init();</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在定义完毕了 我们还需要在但前包下创建一个项目 然后依赖我们定义的spring-ioc项目进行测试</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>这是完成的框架项目结构</p><p><img alt="1591942979103" data-src="1591942979103.png"></p><p>这是定义的测试项目 的项目结构</p><p><img alt="1591943034322" data-src="1591943034322.png"></p><p>他俩存在于一个文件夹下</p><p><img alt="1591943073077" data-src="1591943073077.png"></p><h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p>在框架的同一级目录下创建一个maven项目</p><p>pom依赖中依赖框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dszmr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dsz-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写dsz.properties 这个文件是在开始的时候指定的</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dsz.framework.app.base_package</span>=<span class="string">cn.dszmr</span></span><br><span class="line"><span class="meta">dsz.framework.app.asset_path</span>=<span class="string">/asset/</span></span><br></pre></td></tr></table></figure><p>Usercontroller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.helper.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.helper.IocHelper;</span><br><span class="line"><span class="keyword">import</span> cn.dszmr.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        UserController baen = BeanHelper.getBaen(<span class="keyword">this</span>.getClass());</span><br><span class="line">        baen.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.helloWord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dszmr.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.dszmr.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWord</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于框架未全部完成只能实习一小部分功能  获取装载好的bean也只能到容器中获取</p><p>下一篇MVC篇将完善功能</p><p><strong>启动测试</strong></p><p>打开idea中的maven工具 compile 编译一下框架</p><p>配置测试项目的tomcat启动即可</p><p>访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Rzei90ZXN0" title="http://localhost:8080/dsz/test">http://localhost:8080/dsz/test<i class="fa fa-external-link"></i></span></p><p>控制台打印 调用成功 </p><p>下一篇MVC篇  敬请期待！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-IOC篇&quot;&gt;&lt;a href=&quot;#Spring-IOC篇&quot; class=&quot;headerlink&quot; title=&quot;Spring-IOC篇&quot;&gt;&lt;/a&gt;Spring-IOC篇&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    我们认识的Spring-IOC 无非就是在类上加一个    @Component,@Service,@Controller,@Repository这些注解，这样就代表了将这个类或者说对象交给了spring管理，由spring为我们创建对象，而我们只需要在其他的类的成员位置定义该对象的对象名并在其上面加上@Resource或者@Autowired注解，spring便会自动的把我们所需要的值注入进去了，我们直接调用即可。这看似简单的却又神奇的操作，你又有没有想过spring是怎么实现的呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="框架底层" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>JAVA类加载器</title>
    <link href="http://yoursite.com/kawyang/f1b411ee.html"/>
    <id>http://yoursite.com/kawyang/f1b411ee.html</id>
    <published>2020-05-28T02:55:32.000Z</published>
    <updated>2020-07-07T03:16:54.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>​     当程序主动使用某个类时，如果该类还未被加载到内存中，则JVM会通过加载、连接、初始化3个步骤来对该类进行初始化。如果没有意外，JVM将会连续完成3个步骤，所以有时也把这个3个步骤统称为类加载或类初始化</p><p><img alt="1590634636055" data-src="1590634636055.png"></p><h2 id="一、类加载过程"><a href="#一、类加载过程" class="headerlink" title="一、类加载过程"></a>一、类加载过程</h2><h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a><strong>1.加载</strong></h3><p>​    加载指的是将类的class文件读入到内存，并为之创建一个java.lang.Class对象，也就是说，当程序中使用任何类时，系统都会为之建立一个java.lang.Class对象。</p><a id="more"></a><pre><code>类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。通过使用不同的类加载器，可以从不同来源加载类的二进制数据，通常有如下几种来源。</code></pre><p>从本地文件系统加载class文件，这是前面绝大部分示例程序的类加载方式。<br>从JAR包加载class文件，这种方式也是很常见的，前面介绍JDBC编程时用到的数据库驱动类就放在JAR文件中，JVM可以从JAR文件中直接加载该class文件。<br>通过网络加载class文件。<br>把一个Java源文件动态编译，并执行加载。<br>    类加载器通常无须等到“首次使用”该类时才加载该类，Java虚拟机规范允许系统预先加载某些类。</p><h3 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h3><p>​    当类被加载之后，系统为之生成一个对应的Class对象，接着将会进入连接阶段，连接阶段负责把类的二进制数据合并到JRE中。类连接又可分为如下3个阶段。</p><p><strong>1)验证：</strong>验证阶段用于检验被加载的类是否有正确的内部结构，并和其他类协调一致。Java是相对C++语言是安全的语言，例如它有C++不具有的数组越界的检查。这本身就是对自身安全的一种保护。验证阶段是Java非常重要的一个阶段，它会直接的保证应用是否会被恶意入侵的一道重要的防线，越是严谨的验证机制越安全。验证的目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，不会危害虚拟机自身安全。其主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</p><p><strong>四种验证做进一步说明：</strong></p><p><strong>文件格式验证：</strong>主要验证字节流是否符合Class文件格式规范，并且能被当前的虚拟机加载处理。例如：主，次版本号是否在当前虚拟机处理的范围之内。常量池中是否有不被支持的常量类型。指向常量的中的索引值是否存在不存在的常量或不符合类型的常量。</p><p><strong>元数据验证：</strong>对字节码描述的信息进行语义的分析，分析是否符合java的语言语法的规范。</p><p><strong>字节码验证：</strong>最重要的验证环节，分析数据流和控制，确定语义是合法的，符合逻辑的。主要的针对元数据验证后对方法体的验证。保证类方法在运行时不会有危害出现。</p><p><strong>符号引用验证：</strong>主要是针对符号引用转换为直接引用的时候，是会延伸到第三解析阶段，主要去确定访问类型等涉及到引用的情况，主要是要保证引用一定会被访问到，不会出现类等无法访问的问题。</p><p>   2)<strong>准备：</strong>类准备阶段负责为类的静态变量分配内存，并设置默认初始值。</p><p>   3)<strong>解析：</strong>将类的二进制数据中的符号引用替换成直接引用。说明一下：符号引用：符号引用是以一组符号来描述所引用的目标，符号可以是任何的字面形式的字面量，只要不会出现冲突能够定位到就行。布局和内存无关。直接引用：是指向目标的指针，偏移量或者能够直接定位的句柄。该引用是和内存中的布局有关的，并且一定加载进来的。</p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>​    初始化是为类的静态变量赋予正确的初始值，准备阶段和初始化阶段看似有点矛盾，其实是不矛盾的，如果类中有语句：private static int a = 10，它的执行过程是这样的，首先字节码文件被加载到内存后，先进行链接的验证这一步骤，验证通过后准备阶段，给a分配内存，因为变量a是static的，所以此时a等于int类型的默认初始值0，即a=0,然后到解析（后面在说），到初始化这一步骤时，才把a的真正的值10赋给a,此时a=10。</p><h2 id="二、类加载时机"><a href="#二、类加载时机" class="headerlink" title="二、类加载时机"></a>二、类加载时机</h2><p>创建类的实例，也就是new一个对象<br>访问某个类或接口的静态变量，或者对该静态变量赋值<br>调用类的静态方法<br>反射（Class.forName(“com.lyj.load”)）<br>初始化一个类的子类（会首先初始化子类的父类）<br>JVM启动时标明的启动类，即文件名和类名相同的那个类<br>     除此之外，下面几种情形需要特别指出：</p><pre><code>对于一个final类型的静态变量，如果该变量的值在编译时就可以确定下来，那么这个变量相当于“宏变量”。Java编译器会在编译时直接把这个变量出现的地方替换成它的值，因此即使程序使用该静态变量，也不会导致该类的初始化。反之，如果final类型的静态Field的值不能在编译时确定下来，则必须等到运行时才可以确定该变量的值，如果通过该类来访问它的静态变量，则会导致该类被初始化。</code></pre><h2 id="三、类加载器"><a href="#三、类加载器" class="headerlink" title="三、类加载器"></a>三、类加载器</h2><p>​    类加载器负责加载所有的类，其为所有被载入内存中的类生成一个java.lang.Class实例对象。一旦一个类被加载如JVM中，同一个类就不会被再次载入了。正如一个对象有一个唯一的标识一样，一个载入JVM的类也有一个唯一的标识。在Java中，一个类用其全限定类名（包括包名和类名）作为标识；但在JVM中，一个类用其全限定类名和其类加载器作为其唯一标识。例如，如果在pg的包中有一个名为Person的类，被类加载器ClassLoader的实例kl负责加载，则该Person类对应的Class对象在JVM中表示为(Person.pg.kl)。这意味着两个类加载器加载的同名类：（Person.pg.kl）和（Person.pg.kl2）是不同的、它们所加载的类也是完全不同、互不兼容的。</p><p>   JVM预定义有三种类加载器，当一个 JVM启动的时候，Java开始使用如下三种类加载器：</p><p> <strong>1)根类加载器（bootstrap class loader）:</strong>它用来加载 Java 的核心类，是用原生代码来实现的，并不继承自 java.lang.ClassLoader（负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类）。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</p><p>下面程序可以获得根类加载器所加载的核心类库,并会看到本机安装的Java环境变量指定的jdk中提供的核心jar包路径：</p><p>public class ClassLoaderTest {</p><pre><code>public static void main(String[] args) {    URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();    for(URL url : urls){        System.out.println(url.toExternalForm());    }}</code></pre><p>}<br>运行结果：</p><p><img alt="img" data-src="https://img-blog.csdn.net/2018081314481932?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MDc1NDI1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>  <strong>2)扩展类加载器（extensions class loader）：</strong>它负责加载JRE的扩展目录，lib/ext或者由java.ext.dirs系统属性指定的目录中的JAR包的类。由Java语言实现，父类加载器为null。</p><p>  <strong>3)系统类加载器（system class loader）：</strong>被称为系统（也称为应用）类加载器，它负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，或者CLASSPATH换将变量所指定的JAR包和类路径。程序可以通过ClassLoader的静态方法getSystemClassLoader()来获取系统类加载器。如果没有特别指定，则用户自定义的类加载器都以此类加载器作为父加载器。由Java语言实现，父类加载器为ExtClassLoader。</p><p>类加载器加载Class大致要经过如下8个步骤：</p><ol><li><p>检测此Class是否载入过，即在缓冲区中是否有此Class，如果有直接进入第8步，否则进入第2步。</p></li><li><p>如果没有父类加载器，则要么Parent是根类加载器，要么本身就是根类加载器，则跳到第4步，如果父类加载器存在，则进入第3步。</p></li><li><p>请求使用父类加载器去载入目标类，如果载入成功则跳至第8步，否则接着执行第5步。</p></li><li><p>请求使用根类加载器去载入目标类，如果载入成功则跳至第8步，否则跳至第7步。</p></li><li><p>当前类加载器尝试寻找Class文件，如果找到则执行第6步，如果找不到则执行第7步。</p></li><li><p>从文件中载入Class，成功后跳至第8步。</p></li><li><p>抛出ClassNotFountException异常。</p></li><li><p>返回对应的java.lang.Class对象。</p></li></ol><h2 id="四、类加载机制："><a href="#四、类加载机制：" class="headerlink" title="四、类加载机制："></a>四、类加载机制：</h2><h3 id="1-JVM的类加载机制主要有如下3种。"><a href="#1-JVM的类加载机制主要有如下3种。" class="headerlink" title="1.JVM的类加载机制主要有如下3种。"></a>1.JVM的类加载机制主要有如下3种。</h3><p>全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。<br>双亲委派：所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。<br>缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。</p><h3 id="2-这里说明一下双亲委派机制："><a href="#2-这里说明一下双亲委派机制：" class="headerlink" title="2.这里说明一下双亲委派机制："></a>2.这里说明一下双亲委派机制：</h3><p><img alt="img" data-src="https://img-blog.csdn.net/20180813145521896?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MDc1NDI1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><pre><code> 双亲委派机制，其工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式，即每个儿子都很懒，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己才想办法去完成。双亲委派机制的优势：采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类加载器&quot;&gt;&lt;a href=&quot;#类加载器&quot; class=&quot;headerlink&quot; title=&quot;类加载器&quot;&gt;&lt;/a&gt;类加载器&lt;/h1&gt;&lt;p&gt;​     当程序主动使用某个类时，如果该类还未被加载到内存中，则JVM会通过加载、连接、初始化3个步骤来对该类进行初始化。如果没有意外，JVM将会连续完成3个步骤，所以有时也把这个3个步骤统称为类加载或类初始化&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;1590634636055&quot; data-src=&quot;1590634636055.png&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;一、类加载过程&quot;&gt;&lt;a href=&quot;#一、类加载过程&quot; class=&quot;headerlink&quot; title=&quot;一、类加载过程&quot;&gt;&lt;/a&gt;一、类加载过程&lt;/h2&gt;&lt;h3 id=&quot;1-加载&quot;&gt;&lt;a href=&quot;#1-加载&quot; class=&quot;headerlink&quot; title=&quot;1.加载&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.加载&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​    加载指的是将类的class文件读入到内存，并为之创建一个java.lang.Class对象，也就是说，当程序中使用任何类时，系统都会为之建立一个java.lang.Class对象。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="搬砖技术" scheme="http://yoursite.com/tags/%E6%90%AC%E7%A0%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>jvm虚拟机</title>
    <link href="http://yoursite.com/kawyang/c9804b55.html"/>
    <id>http://yoursite.com/kawyang/c9804b55.html</id>
    <published>2020-05-22T06:12:44.000Z</published>
    <updated>2020-05-26T05:53:59.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jvm架构解析"><a href="#jvm架构解析" class="headerlink" title="jvm架构解析"></a>jvm架构解析</h2><p>程序加载步骤   class  &gt;&gt; 类装载子系统 &gt;&gt; 运行时数据区(内存模型)  &gt;&gt; 字节码执行引擎</p><p><img alt="1590134776914" data-src="1590134776914.png"></p><p>栈： 一个线程对应一块栈内存区域</p><p>栈针 ： 一个方法对应一个栈针</p><p>操作数栈：一个临时的运行空间  用于程序运算</p><p>局部变量 表：存储局部变量 内部是集合的一个存储结构</p><a id="more"></a><p>方法出口：但前方法执行完毕后 回到调用者方法 从那块开始继续执行 </p><p>程序计数器:代码运行到那一行的位置 值是由字节码执行引擎进行修改</p><p>方法区：1.8之前叫永久代 1.8以后叫元空间 它使用的是物理内存 不是虚拟机的内存  内部主要存储 常量，静态变量，类信息等</p><p>堆：由老年代与年轻代组成 老年代占用 3/2 年轻代占用3/1   年轻代分为Eden区 和 survivor区   对象一般会存储在Eden区  在Eden区 被占满后 会字节码执行引擎会调用minor gc 对垃圾对象进行回收  有引用的的对象会被复制进 survivor0区  没有引用的对象直接清除  当gc对堆进行第二次进行清理时 Eden 区有引用的对象会被移到survivor0区 ，survivor0区的有引用的对象会被移动到 survivor1区中 并且每进行一次移动 对象头中的年龄便会加一 年龄达到15会被移到老年代内 当老年代内存满了的时候 会字节码执行引擎会调用full gc对整个堆进行垃圾清理 如何还是在增加则会触发oom内存溢出 </p><p>stop the word :停止到所有用户线程 然fullgc 让full gc 专心回收内存  原因是为了防止gc在处理的时候 突然有线程停止 产生大量垃圾 会增加gc的复杂度 也会让gc的清理不够干净</p><p>本地方法栈：native 修饰方法 会到底层去找c语言实现</p><p>jvm调优：计算业务可能触发的内存大小，然后对堆内存 年轻代进行合理的内存分配，让对象尽量不要进入老年代 触发full gc 从而触发STW导致系统卡顿   （进入survivor区内存的对象如果内存超过 survivor区内存的50%会被直接移入到老年代内去  极易导致STW）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jvm架构解析&quot;&gt;&lt;a href=&quot;#jvm架构解析&quot; class=&quot;headerlink&quot; title=&quot;jvm架构解析&quot;&gt;&lt;/a&gt;jvm架构解析&lt;/h2&gt;&lt;p&gt;程序加载步骤   class  &amp;gt;&amp;gt; 类装载子系统 &amp;gt;&amp;gt; 运行时数据区(内存模型)  &amp;gt;&amp;gt; 字节码执行引擎&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;1590134776914&quot; data-src=&quot;1590134776914.png&quot;&gt;&lt;/p&gt;&lt;p&gt;栈： 一个线程对应一块栈内存区域&lt;/p&gt;&lt;p&gt;栈针 ： 一个方法对应一个栈针&lt;/p&gt;&lt;p&gt;操作数栈：一个临时的运行空间  用于程序运算&lt;/p&gt;&lt;p&gt;局部变量 表：存储局部变量 内部是集合的一个存储结构&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql优化相关之如何写出一条好sql</title>
    <link href="http://yoursite.com/kawyang/785a1566.html"/>
    <id>http://yoursite.com/kawyang/785a1566.html</id>
    <published>2020-05-18T01:02:36.000Z</published>
    <updated>2020-05-22T10:06:05.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sql架构与存储引擎"><a href="#sql架构与存储引擎" class="headerlink" title="sql架构与存储引擎"></a>sql架构与存储引擎</h2><h3 id="Qps与Tps"><a href="#Qps与Tps" class="headerlink" title="Qps与Tps"></a>Qps与Tps</h3><p>​                TPS: 指服务器每秒处理的事务数 ，<strong>支持事务的存储引擎</strong>特有的一个性能指标 </p><p>TPS = (事务提交+事务回滚）/运行时间</p><p>​                QPS:执行sql等待返回结果之间的等待时间</p><p>QPS=查询个数/运行时间</p><h3 id="mysqlslap"><a href="#mysqlslap" class="headerlink" title="mysqlslap"></a>mysqlslap</h3><a id="more"></a><p>MySQLSlap是从MySQL5.1.4版本就开始的官方提供的压力测试工具，能测试MySQL服务器的性能</p><h3 id="MySQL逻辑架构"><a href="#MySQL逻辑架构" class="headerlink" title="MySQL逻辑架构"></a>MySQL逻辑架构</h3><p>​    <strong>连接层</strong></p><p>MySQL启动时 MySQL自己会创建一个线程 每一个用户对MySQL进行连接时，服务器都会新建一个线程去处理这一个连接，每个线程都是独立的 但是如果有两个线程进行修改同一块内存时会引发数据同步问题</p><p><img alt="1589769109015" data-src="/1589769109015.png"></p><p><strong>sql处理层</strong></p><p>sql语句的解析，优化，缓存的查询 MySQL内置函数的实现等</p><p>1，如果是查询语句select，首先会查询缓存是否已经有对应的结果，有返回结果 没有的话进行下一步 </p><p>2，解析查询，创建一个内部数据结构这个解析树用于解析SQL语法</p><p>3，优化sql语句，列如重写查询，决定表的读写顺序以及选择需要的查询等，这一阶段用户是可以查询的，用户可以针对的进行一个调优</p><p><img alt="1589770015142" data-src="1589770015142.png"></p><p><strong>sql缓存</strong></p><p>show variables like ‘%query_cache_type%’ </p><p>查询数据库缓存是否开启</p><p><strong>sql转换器</strong></p><p>将传输进来的sql语句转换成MySQL能看得懂的样子</p><p><img alt="1589770451852" data-src="1589770451852.png"></p><p><strong>sql优化器</strong></p><p>能够优化一些MySQL中很明显得一些冗余代码 （列如 1=1），使得代码变得更加简单</p><h3 id="mylsam存储引擎"><a href="#mylsam存储引擎" class="headerlink" title="mylsam存储引擎"></a>mylsam存储引擎</h3><p><strong>文件结构</strong></p><ul><li>frm //存储表结构，所有得引擎都具备</li><li>myd  //数据文件</li><li>myi //索引文件</li></ul><p><strong>mysam特点</strong></p><ul><li>并发性与锁级别-表级锁</li><li>支持全文检索</li><li>支持数据压缩</li><li>myisampack -d -f testmysam.myl  文件压缩指令</li></ul><p><strong>mysam适用场景</strong></p><ul><li>非事务型应用（数据仓库，报表，日志数据）</li><li>只读类应用</li><li>空间类应用（地图等应用 更好得计算函数）</li></ul><h3 id="innodb存储引擎"><a href="#innodb存储引擎" class="headerlink" title="innodb存储引擎"></a><strong>innodb存储引擎</strong></h3><p>innodb是MySQL在5.5以后版本的默认数据库</p><p>innodb_file_per_table  属性 no代表独立表空间 off代表系统表空间 on的时候会创建一个.ibd文件 内容是（数据+索引）mysql5.6以前都是默认系统表空间</p><p>比较：</p><ul><li>系统表空间无法简单的收缩文件大小（所以占用磁盘内存会越来越大）</li><li>独立表空间可以通过optimize table收缩系统文件</li><li>系统表空间会产生io瓶颈</li><li>独立表空间可以同时向多个文件刷新数据</li></ul><p>（列如一张表有100w条数据占用磁盘内存 100000kb 当你把表中数据清除时 他在磁盘的占用内存还是 100000kb 无法收缩文件大小）</p><p><img alt="1589773241899" data-src="1589773241899.png"></p><p><strong>适用场景</strong>：</p><p>修改较多，事务操作较多的场景</p><h3 id="CSV存储引擎"><a href="#CSV存储引擎" class="headerlink" title="CSV存储引擎"></a>CSV存储引擎</h3><p>​    <strong>结构</strong></p><ul><li>​        数据以文本的方式存储在文件</li><li>​        .csv文件存储内容</li><li>​        .csm文件存储表的元数据如表的状态数据量等</li><li>​        .frm表结构</li></ul><p>​    <strong>特点</strong></p><ul><li>以csv格式进行数据存储 所有的列都不能为null 不支持索引 （不适合大表，不适合在线处理）</li><li>可以对数据文件直接编辑（保存文本文件内容）</li><li>修改文件以后运行FLUSH TABLES进行刷新</li><li>列的最后得有一个空行</li></ul><h3 id="Archive存储引擎"><a href="#Archive存储引擎" class="headerlink" title="Archive存储引擎"></a>Archive存储引擎</h3><p><strong>组成</strong></p><p>以zlib对表数据进行压缩，磁盘i/o更少数据存储在ARZ为后缀的文件中</p><p><strong>特点</strong></p><ul><li>只支持insert和select操作</li><li>只允许在自增ID列上加索引</li></ul><p><strong>使用场景</strong></p><p>日志和数据采集应用</p><h3 id="Memory-存储引擎"><a href="#Memory-存储引擎" class="headerlink" title="Memory 存储引擎"></a>Memory 存储引擎</h3><p><strong>特点</strong></p><ul><li>文件系统存储特点</li><li>支持hash索引和btree索引</li><li>所有字段都是固定长度</li><li>不支持blog和text等大字段</li><li>Memory存储引擎使用表级锁</li><li>最大大小由max_heap_table_size参数决定</li><li>数据存储到内存当中</li></ul><p><strong>使用场景</strong></p><ul><li><p>hash索引用于查找或者是映射表</p></li><li><p>用于保存数据分析中产生的中间表</p></li><li><p>用于缓存周期性聚合数据的结果表<br>注意：memory数据易丢失，所以要求数据可再生</p></li></ul><h3 id="Ferderated-存储引擎"><a href="#Ferderated-存储引擎" class="headerlink" title="Ferderated 存储引擎"></a>Ferderated 存储引擎</h3><p><strong>特点</strong></p><ul><li>提供了访问远程MySQL服务器上表的方法</li><li>本地不存储数据，数据全部放到远程服务器上</li><li>本地需要保存表结构和远程服务器的连接信息</li></ul><p><strong>使用场景</strong></p><ul><li>偶尔的统计分析及手工查询</li></ul><h2 id="sql锁机制"><a href="#sql锁机制" class="headerlink" title="sql锁机制"></a>sql锁机制</h2><h3 id="MySQL中的锁"><a href="#MySQL中的锁" class="headerlink" title="MySQL中的锁"></a><strong>MySQL中的锁</strong></h3><p>​        表级锁：开销小，加锁快，不会出现死锁，锁定粒度大，发生锁冲突的概率较高，并发低 常见表级锁的存储引擎有mylsam 表级锁更加适合以查询为主的场景  </p><p>​        行级锁: 开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度高，常见的行级锁存储引擎有innodb 更适合有修改操作的事务场景</p><h3 id="myisam的表锁"><a href="#myisam的表锁" class="headerlink" title="myisam的表锁"></a>myisam的表锁</h3><h4 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a><strong>读锁</strong></h4><p><strong>加共享读锁</strong> lock table 表名 read</p><p><strong>测试</strong></p><ol><li>lock table testmysam READ 启动另外一个session select * from<br>testmysam 可以查询</li><li>insert into testmysam value(2);<br>update testmysam set id=2 where id=1;<br>报错</li><li>在另外一个session中<br> insert into testmysam value(2); 等待</li><li>在同一个session中<br> insert into testdemo value(2,’2’,’3’); 报错<br> select * from testdemo ; 报错</li><li>在另外一个session中<br> insert into testdemo value(2,’2’,’3’); 成功</li><li>加索在同一个session 中 select s.* from testmysam s 报错<br> lock table 表名 as 别名 read;</li><li>查看 show status LIKE ‘table_locks_waited’ 表被锁过几次 </li><li>UNLOCK TABLES  删除锁</li></ol><h4 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a><strong>写锁</strong></h4><p><strong>加独占写锁</strong> lock table 表名 write</p><p><strong>测试</strong></p><ol><li>lock table testmysam WRITE<br>在同一个session中<br>insert testmysam value(3);<br>delete from testmysam where id = 3<br>select * from testmysam</li><li>对不同的表操作（ 报错）<br>select s.* from testmysam s<br>insert into testdemo value(2,’2’,’3’);</li><li>在其他session中 （ 等待）<br>select * from testmysam </li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>对myisam表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求</li><li>对myisam表的读操作，不会阻塞但前session对表读，当对表进行修改会保存</li><li>一个session使用LOCK TABLE命令给表f加了读锁，这个session可以查询锁定表中的记录，但更新或访问其他表都会提示错误</li><li>另外一个session可以查询表中的记录，但更新就会出现锁等待</li><li>对myisam表的写操作，则会阻塞其他用户对同一表的读和写操作</li><li>对myisam表的写操作，当前session可以对本表做crud，但对其他表进行操作就会报错</li></ul><h3 id="innoDB行锁"><a href="#innoDB行锁" class="headerlink" title="innoDB行锁"></a>innoDB行锁</h3><p><strong>行锁简介</strong></p><p>共享锁又称：读锁，当一个事务对某几行上读锁时，允许其他事务对这几行进行读操作，但不允许其进行写操作，也不允许其他事务给这几行上排它锁，但允许上读锁</p><p>排他锁又称：写锁。当一个事务对某几个上写锁时，不允许其他事务写，但允许读，更不允许其他事务给这几行上任何锁，包括写锁。</p><p><strong>语法</strong>：</p><p>上共享锁的写法：lock in share mode </p><p>列如：select * from 表 where 条件 lock in share mode </p><p>上排他锁的写法： for update</p><p>列如： select * from 表 where 条件 for update </p><p><strong>注意：</strong></p><ol><li>两个事务不能锁同一个索引</li><li>insert，delete，update 在事务中都会自动默认加上排他锁</li><li>行锁必须有索引才能实现，否则会自动锁全表，那么就不是行锁了</li></ol><p><strong>测试：</strong></p><ol><li><p>BEGIN<br>select * from testdemo where id =1 for update<br>在另外一个session中<br>update testdemo set c1 = ‘1’ where id = 2 成功<br>update testdemo set c1 = ‘1’ where id = 1 等待</p></li><li><p>BEGIN<br>update testdemo set c1 = ‘1’ where id = 1<br>在另外一个session中<br>update testdemo set c1 = ‘1’ where id = 1 等待</p></li><li><p>BEGIN</p><p>update testdemo set c1 = ‘1’ where  c1 = ‘1’ 在另外一个session中 update testdemo set c1 = ‘2’ where c1 = ‘2’ 等待</p></li></ol><p><strong>先来看下行锁</strong><br>第一个session中<br>select * from testdemo where id =1 for update<br>第二个session<br>select * from testdemo where id =1 lock in share mode<br>回到第一个session UNLOCK TABLES 并不会解锁<br>使用commit 或者 begin或者ROLLBACK 才会解锁</p><p><strong>再来看下表锁</strong><br>lock table testdemo WRITE<br>使用commit， ROLLBACK 并不会解锁<br>使用UNLOCK TABLES 或者begin会解锁 </p><h2 id="sql事务"><a href="#sql事务" class="headerlink" title="sql事务"></a>sql事务</h2><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>事务有4个属性：原子性，一致性，隔离性，持久性。简称为ACID特性</p><ul><li>原子性：一组事务要么全部成功要么全部失败</li><li>一致性：事务前后的数据不可以丢失不可以不一致</li><li>隔离性：一个事务不能被另一个事务所干扰，即并发执行的各个事务之间不能互相干扰。</li><li>持久性：一个事务一旦提交 其对数据的改变就必须是永久性的</li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>事务有四种隔离级别</p><ul><li>​    读未提交   可能会产生脏读问题</li><li>​    读已提交   可能会产生不可重复读问题</li><li>​    可重复读  可以对产生幻读问题</li><li>​    可串行化   </li></ul><p>MySQL的默认隔离级别为可重复读</p><p><strong>并发问题</strong></p><ul><li>脏读：事务a读取到了事务b更新的数据，然后b进行了回滚操作 导致a读到的数据并不准确</li><li>不可重复读： 事务A多次读取一个数据，事务b在事务a读取时进行了更新操作，但是由于事务a读取的还是未进行更新的数据，所以事务A读取的数据并不准确</li><li>幻读：事务A开启事务准备往表里插入一条数据，而事务B也一样</li></ul><p><strong>事务的语法</strong></p><ul><li>开启事务<ol><li>start transaction</li><li>begin work</li><li>begin</li></ol></li><li>事务回滚 rollback</li><li>事务提交 commit</li><li>还原点 savepoint</li></ul><p><strong>总结</strong></p><p><strong>事务隔离级别为可重复读时，如果有索引（包括主键索引）的时候，以索引列为条件更新数据，会存在间隙锁间、行锁、页锁的问题，从而锁住一些行；如果没有索引，更新数据时会锁住整张表</strong></p><p><strong>事务隔离级别为串行化时，读写数据都会锁住整张表</strong></p><p><strong>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大，对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed**</strong>，它能够避免脏读取，而且具有较好的并发性能。**</p><h2 id="sql业务设计"><a href="#sql业务设计" class="headerlink" title="sql业务设计"></a>sql业务设计</h2><h3 id="范式设计-三大范式"><a href="#范式设计-三大范式" class="headerlink" title="范式设计 三大范式"></a>范式设计 三大范式</h3><p><strong>第一范式</strong></p><p>数据库表中的所有字段都只具有单一属性</p><p>单一属性的列是由基本数据类型所构成的</p><p>设计出来的表都是简单的二维表</p><p><img alt="img" data-src="2.png"> </p><p>name-age列具有两个属性，一个name,一个 age不符合第一范式，把它拆分成两列</p><p><img alt="img" data-src="3.png"></p><p><strong>第二范式</strong></p><p>要求表中只具有一个业务主键，也就是说符合第二范式的表不能存在非主键列只对部分主键的依赖关系</p><p>有两张表：订单表，产品表</p><p><img alt="img" data-src="4.png"></p><p><img alt="img" data-src="5.png"></p><p>一个订单有多个产品，所以订单的主键为【订单ID】和【产品ID】组成的联合主键，这样2个组件不符合第二范式，而且产品ID和订单ID没有强关联，故，把订单表进行拆分为订单表与订单与商品的中间表</p><p><img alt="img" data-src="6.png"></p><p><strong>第三范式</strong></p><p>指每一个非非主属性既不部分依赖于也不传递依赖于业务主键，也就是在第二范式的基础上相处了非主键对主键的传递依赖</p><p><img alt="img" data-src="7.png"></p><p>其中</p><p><strong>客户编号</strong> <strong>和订单编号管理</strong> <strong>关联</strong></p><p><strong>客户姓名</strong> <strong>和订单编号管理</strong> <strong>关联</strong></p><p><strong>客户编号</strong> <strong>和</strong> <strong>客户姓名</strong> <strong>关联</strong></p><p>如果客户编号发生改变，用户姓名也会改变，这样不符合第三大范式，应该<strong>把客户姓名这一列删除</strong></p><h3 id="反范式设计"><a href="#反范式设计" class="headerlink" title="反范式设计"></a>反范式设计</h3><h4 id="什么叫反范式化设计"><a href="#什么叫反范式化设计" class="headerlink" title="什么叫反范式化设计"></a>什么叫反范式化设计</h4><ul><li>反范式化是针对范式化而言得，在前面介绍了数据库设计得范式</li><li>所谓得反范式化就是为了性能和读取效率得考虑而适当得对数据库设计范式得要求进行违反</li><li>允许存在少量得冗余，换句话来说反范式化就是使用空间来换取时间</li></ul><p>商品信息反范式设计</p><p>下面是范式设计的商品信息表</p><p><img alt="1589872072524" data-src="1589872072524.png"></p><p>商品信息和分类信息经常一起查询，所以把分类信息也放到商品表里面，冗余存放</p><p>在线销售功能反范式</p><p>下面是在线手写功能的范式设计</p><p><img alt="1589872083937" data-src="1589872083937.png"></p><p> 范式化设计优缺点</p><p>优点：</p><p>  可以尽量得减少数据冗余</p><p>  范式化的更新操作比反范式化更快</p><p>  范式化的表通常比反范式化的表更小</p><p>缺点：</p><p>   对于查询需要对多个表进行关联</p><p>   更难进行索引优化 </p><h4 id="反范式化设计优缺点"><a href="#反范式化设计优缺点" class="headerlink" title="反范式化设计优缺点"></a>反范式化设计优缺点</h4><p>优点：</p><p> 可以减少表的关联</p><p>可以更好的进行索引优化</p><p>缺点：</p><p>  存在数据冗余及数据维护异常</p><p>  对数据的修改需要更多的成本</p><h2 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>数据库、表、字段的命名要遵守可读性原则</p><p>使用大小写来格式化的库对象名字以获得良好的可读性</p><p>例如：使用custAddress而不是custaddress来提高可读性。</p><p>数据库、表、字段的命名要遵守表意性原则</p><p>对象的名字应该能够描述它所表示的对象</p><p>例如：</p><p>对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程</p><p>存储过程应该能够体现存储过程的功能。</p><p>数据库、表、字段的命名要遵守长名原则</p><p>尽可能少使用或者不使用缩写</p><h3 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h3><p><img alt="img" data-src="8.png"></p><h3 id="数据类型选择"><a href="#数据类型选择" class="headerlink" title="数据类型选择"></a>数据类型选择</h3><p>当一个列可以选择多种数据类型时</p><p>l  优先考虑数字类型</p><p>l  其次是日期、时间类型</p><p>l  最后是字符类型</p><p>l  对于相同级别的数据类型，应该优先选择占用空间小的数据类型</p><p>浮点类型</p><p><img alt="img" data-src="ss.png"></p><p>注意float 和double 是非精度类型，如果是和金额相关尽量用decimal</p><p><img alt="img" data-src="9.png"></p><p>select sum(c1),sum(c2),sum(c3) from test_numberic</p><p><img alt="img" data-src="10.png"></p><p>日期类型</p><p>面试经常问道 timestamp 类型 与 datetime区别</p><p><img alt="img" data-src="11.png"></p><p>datetime类型在5.6中字段长度是5个字节</p><p>datetime类型在5.5中字段长度是8个字节</p><p><strong>timestamp</strong> <strong>和时区有关，而datetime**</strong>无关**</p><p><img alt="img" data-src="12.png"></p><p>insert into  test_time  VALUES(NOW(),NOW(),NOW());</p><p>set time_zone=”-10:00”</p><p><img alt="img" data-src="13.png"></p><h2 id="sql慢查询"><a href="#sql慢查询" class="headerlink" title="sql慢查询"></a>sql慢查询</h2><h3 id="什么是慢查询"><a href="#什么是慢查询" class="headerlink" title="什么是慢查询"></a>什么是慢查询</h3><p>慢查询日志，顾名思义，就是查询慢的日志，是指mysql记录所有执行超过long_query_time参数设定的时间阈值的SQL语句的日志。该日志能为SQL语句的优化带来很好的帮助。默认情况下，慢查询日志是关闭的，要使用慢查询日志功能，首先要开启慢查询日志功能。（也就是说 把查询慢的SQL写到一个日志中）</p><p> 1.1.1.    慢查询基本配置</p><ul><li><p>slow_query_log 启动停止技术慢查询日志</p></li><li><p>slow_query_log_file 指定慢查询日志得存储路径及文件（默认和数据文件放一起）</p></li><li><p>long_query_time 指定记录慢查询日志SQL执行时间得伐值（单位：秒，默认10秒）</p></li><li><p>log_queries_not_using_indexes  是否记录未使用索引的SQL</p></li><li><p>log_output 日志存放的地方【TABLE】【FILE】【FILE,TABLE】</p></li></ul><p>配置了慢查询后，它会记录符合条件的SQL</p><p>包括：</p><ol><li><p>查询语句</p></li><li><p>数据修改语句</p></li><li><p>已经回滚得SQL </p></li></ol><p><strong>实操：</strong></p><p>通过下面命令查看下上面的配置：</p><p>show VARIABLES like ‘%slow_query_log%’</p><p>show VARIABLES like ‘%slow_query_log_file%’ </p><p>show VARIABLES like ‘%long_query_time%’ </p><p>show VARIABLES like ‘%log_queries_not_using_indexes%’ </p><p>show VARIABLES like ‘log_output’  </p><p>set global long_query_time=0;   —默认10秒，这里为了演示方便设置为0  </p><p>set GLOBAL  slow_query_log = 1; –开启慢查询日志 </p><p>set global log_output=’FILE,TABLE’  –项目开发中日志只能记录在日志文件中，不能记表中  </p><p>设置完成后，查询一些列表可以发现慢查询的日志文件里面有数据了。</p><h3 id="1-1-1-慢查询基本配置"><a href="#1-1-1-慢查询基本配置" class="headerlink" title="1.1.1.    慢查询基本配置"></a>1.1.1.    慢查询基本配置</h3><ul><li>slow_query_log 启动停止技术慢查询日志</li><li>slow_query_log_file 指定慢查询日志得存储路径及文件（默认和数据文件放一起）</li><li>long_query_time 指定记录慢查询日志SQL执行时间得伐值（单位：秒，默认10秒）</li><li>log_queries_not_using_indexes  是否记录未使用索引的SQL</li><li>log_output 日志存放的地方【TABLE】【FILE】【FILE,TABLE】</li></ul><p>配置了慢查询后，它会记录符合条件的SQL</p><p>包括：</p><ul><li>查询语句</li><li>数据修改语句</li><li>已经回滚得SQL </li></ul><p><strong>实操：</strong></p><p><strong>通过下面命令查看下上面的配置：</strong></p><ul><li>show VARIABLES like ‘%slow_query_log%’</li><li>show VARIABLES like ‘%slow_query_log_file%’</li><li>show VARIABLES like ‘%long_query_time%’</li><li>show VARIABLES like ‘%log_queries_not_using_indexes%’</li><li>show VARIABLES like ‘log_output’</li><li>set global long_query_time=0;   —默认10秒，这里为了演示方便设置为0 </li><li>set GLOBAL  slow_query_log = 1; –开启慢查询日志</li><li>set global log_output=’FILE,TABLE’  –项目开发中日志只能记录在日志文件中，不能记表中</li></ul><p>设置完成后，查询一些列表可以发现慢查询的日志文件里面有数据了。</p><p><strong>Mysqldumpslow</strong></p><p>常用的慢查询日志分析工具，汇总除查询条件外其他完全相同的SQL，并将分析结果按照参数中所指定的顺序输出。</p><p><strong>语法：</strong></p><p>mysqldumpslow -s r -t 10 slow-mysql.log</p><p>-s order (c,t,l,r,at,al,ar) </p><p>​         c:总次数</p><p>​         t:总时间</p><p>​         l:锁的时间</p><p>​         r:总数据行</p><p>​         at,al,ar  :t,l,r平均数  【例如：at = 总时间/总次数】</p><p>  -t  top   指定取前面几天作为结果输出</p><p> //运行指令</p><p>mysqldumpslow.pl -s t -t 10 D:\DESKTOP-2EKGEE5-slow.log </p><h2 id="sql索引与执行计划"><a href="#sql索引与执行计划" class="headerlink" title="sql索引与执行计划"></a>sql索引与执行计划</h2><h3 id="生活中的索引"><a href="#生活中的索引" class="headerlink" title="生活中的索引"></a>生活中的索引</h3><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p><p>可以得到索引的本质：<strong>索引是数据结构</strong>。</p><p>上面的理解比较抽象，举一个例子，平时看任何一本书，首先看到的都是目录，通过目录去查询书籍里面的内容会非常的迅速。</p><h3 id="MySql中的索引"><a href="#MySql中的索引" class="headerlink" title="MySql中的索引"></a>MySql中的索引</h3><p><img alt="1589883497088" data-src="1589883497088.png"></p><p>MySql中的索引其实也是这么一回事，我们可以在数据库中建立一系列的索引，比如创建主键的时候默认会创建主键索引，上图是一种BTREE的索引。每一个节点都是主键的ID</p><p>当我们通过ID来查询内容的时候，首先去查索引库，在到索引库后能快速的定位索引的具体位置。</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p><strong>普通索引：</strong>即一个索引只包含单个列，一个表可以有多个单列索引</p><p><strong>唯一索引：</strong>索引列的值必须唯一，但允许有空值</p><p><strong>复合索引：</strong>即一个索引包含多个列 </p><p><strong>聚簇索引(聚集索引)</strong>：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。 </p><p><strong>非聚簇索引：</strong>不是聚簇索引，就是非聚簇索引</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p><strong>查看索引</strong></p><p>SHOW INDEX FROM table_name\G</p><p><strong>创建索引</strong></p><p>CREATE  [UNIQUE ] INDEX indexName ON mytable(columnname(length));</p><p>ALTER TABLE 表名 ADD  [UNIQUE ]  INDEX [indexName] ON (columnname(length)) </p><p><strong>删除索引</strong></p><p>DROP INDEX [indexName] ON mytable;</p><h3 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h3><p><strong>什么是执行计划</strong></p><p> 使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是</p><p>如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈</p><p><strong>执行计划的作用</strong></p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><strong>执行计划的语法</strong></p><p>执行计划的语法其实非常简单： 在SQL查询的前面加上EXPLAIN关键字就行。</p><p>比如：EXPLAIN select * from table1 </p><p>重点的就是EXPLAIN后面你要分析的SQL语句 </p><h4 id="执行计划详解"><a href="#执行计划详解" class="headerlink" title="执行计划详解"></a><strong>执行计划详解</strong></h4><p>通过EXPLAIN关键分析的结果由以下列组成，接下来挨个分析每一个列</p><p><img alt="1589883858311" data-src="1589883858311.png"></p><p><strong>1. ID列</strong></p><p>ID列：描述select查询的序列号,包含一组数字，表示查询中执行select子句或操作表的顺序</p><p>根据ID的数值结果可以分成一下三种情况</p><ul><li>id相同：执行顺序由上至下  （按照表在sql语句中的排列顺序进行加载）</li><li>id不同：如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行（如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行）</li><li>id相同不同：同时存在（id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行）</li></ul><p><strong>2. select_type列</strong></p><p>Select_type：查询的类型</p><p>用于区别：普通查询、联合查询、子查询等的复杂查询</p><p>类型如下</p><p><img alt="1589884184701" data-src="1589884184701.png"></p><p><strong>3.table列</strong></p><p>显示这一行数据是关于那张表从那张表而来的</p><p><strong>4.Type列</strong></p><p>type显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p>需要记忆的</p><p>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</p><p>一般来说，得保证查询至少达到range级别，最好能达到ref。</p><p><strong>属性解析：</strong></p><p>System：表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计</p><p>Const：表示通过索引一次就找到了const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快</p><p>eq_ref ：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</p><p>Ref： 非唯一性索引扫描，返回匹配某个单独值的所有行.本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p><p>Range： 只检索给定范围的行,使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的where语句中出现between、&lt;、&gt;、in等的查询这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。</p><p> Index：当查询的结果全为索引列的时候，虽然也是全部扫描，但是只查询的索引库，而没有去查询数据。</p><p>All： Full Table Scan，将遍历全表以找到匹配的行</p><p><strong>5.possible_keys 与Key列</strong></p><p>possible_keys:可能使用的索引</p><p>Key:实际使用的索引。如果为NULL，则没有使用索引</p><p> <strong>6.key_len</strong></p><p>Key_len表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好，key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</p><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><p><strong>尽量全值匹配 ：</strong> 如果可以匹配条件越多越好</p><p><strong>最佳左前缀：</strong>让索引不失效的一个策略，也就是使用索引时，第一个索引字段一定要存在，如果第一个索引字段不存在则会出现索引失效问题</p><p><strong>不在索引列上做任何操作：</strong>（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描</p><p><strong>范围条件放最后：</strong>中间有范围查询会导致后面的索引列全部失效</p><p><strong>覆盖索引尽量用</strong>：尽量使用覆盖索引(只访问索引的而不去访问整张表数据的查询(索引列和查询列一致) )，减少select *</p><p><strong>不等于要甚用</strong>：在使用不等于(!= 或者&lt;&gt;)的时候无法使用索引会导致全表扫描</p><p><strong>Null/Not 有影响：</strong>null/not null对索引的可能影响</p><p><strong>Like查询要当心：</strong>like以通配符开头(‘%abc…’)mysql索引失效会变成全表扫描的操作</p><p><strong>字符类型加引号：</strong>字符串不加单引号索引失效</p><p><strong>OR改UNION效率高：</strong>在使用or的时候尽量更换为union  </p><h2 id="sql函数相关拓展"><a href="#sql函数相关拓展" class="headerlink" title="sql函数相关拓展"></a>sql函数相关拓展</h2><h4 id="一、数学函数"><a href="#一、数学函数" class="headerlink" title="一、数学函数"></a>一、数学函数</h4><p>ABS(x)   返回x的绝对值<br>BIN(x)   返回x的二进制（OCT返回八进制，HEX返回十六进制）<br>CEILING(x)   返回大于x的最小整数值<br>EXP(x)   返回值e（自然对数的底）的x次方<br>FLOOR(x)   返回小于x的最大整数值<br>GREATEST(x1,x2,…,xn)返回集合中最大的值<br>LEAST(x1,x2,…,xn)      返回集合中最小的值<br>LN(x)                    返回x的自然对数<br>LOG(x,y)返回x的以y为底的对数<br>MOD(x,y)                 返回x/y的模（余数）<br>PI()返回pi的值（圆周率）<br>RAND()返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。<br>ROUND(x,y)返回参数x的四舍五入的有y位小数的值<br>SIGN(x) 返回代表数字x的符号的值<br>SQRT(x) 返回一个数的平方根<br>TRUNCATE(x,y)            返回数字x截短为y位小数的结果</p><h4 id="二、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#二、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="二、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>二、聚合函数(常用于GROUP BY从句的SELECT查询中)</h4><p>AVG(col)返回指定列的平均值<br>COUNT(col)返回指定列中非NULL值的个数<br>MIN(col)返回指定列的最小值<br>MAX(col)返回指定列的最大值<br>SUM(col)返回指定列的所有值之和<br>GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果</p><h4 id="三、字符串函数"><a href="#三、字符串函数" class="headerlink" title="三、字符串函数"></a>三、字符串函数</h4><p>ASCII(char)返回字符的ASCII码值<br>BIT_LENGTH(str)返回字符串的比特长度<br>CONCAT(s1,s2…,sn)将s1,s2…,sn连接成字符串<br>CONCAT_WS(sep,s1,s2…,sn)将s1,s2…,sn连接成字符串，并用sep字符间隔<br>INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果<br>FIND_IN_SET(str,list)分析逗号分隔的list列表，如果发现str，返回str在list中的位置<br>LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果<br>LEFT(str,x)返回字符串str中最左边的x个字符<br>LENGTH(s)返回字符串str中的字符数<br>LTRIM(str) 从字符串str中切掉开头的空格<br>POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置<br>QUOTE(str) 用反斜杠转义str中的单引号<br>REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果<br>REVERSE(str) 返回颠倒字符串str的结果<br>RIGHT(str,x) 返回字符串str中最右边的x个字符<br>RTRIM(str) 返回字符串str尾部的空格<br>STRCMP(s1,s2)比较字符串s1和s2<br>TRIM(str)去除字符串首部和尾部的所有空格<br>UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</p><h4 id="四、日期和时间函数"><a href="#四、日期和时间函数" class="headerlink" title="四、日期和时间函数"></a>四、日期和时间函数</h4><p>CURDATE()或CURRENT_DATE() 返回当前的日期<br>CURTIME()或CURRENT_TIME() 返回当前的时间<br>DATE_ADD(date,INTERVAL int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);<br>DATE_FORMAT(date,fmt)  依照指定的fmt格式格式化日期date值<br>DATE_SUB(date,INTERVAL int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH);<br>DAYOFWEEK(date)   返回date所代表的一星期中的第几天(1<del>7)<br>DAYOFMONTH(date)  返回date是一个月的第几天(1</del>31)<br>DAYOFYEAR(date)   返回date是一年的第几天(1<del>366)<br>DAYNAME(date)   返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);<br>FROM_UNIXTIME(ts,fmt)  根据指定的fmt格式，格式化UNIX时间戳ts<br>HOUR(time)   返回time的小时值(0</del>23)<br>MINUTE(time)   返回time的分钟值(0<del>59)<br>MONTH(date)   返回date的月份值(1</del>12)<br>MONTHNAME(date)   返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);<br>NOW()    返回当前的日期和时间<br>QUARTER(date)   返回date在一年中的季度(1<del>4)，如SELECT QUARTER(CURRENT_DATE);<br>WEEK(date)   返回日期date为一年中第几周(0</del>53)<br>YEAR(date)   返回日期date的年份(1000~9999)<br>一些示例：<br>获取当前系统时间：SELECT FROM_UNIXTIME(UNIX_TIMESTAMP());<br>SELECT EXTRACT(YEAR_MONTH FROM CURRENT_DATE);<br>SELECT EXTRACT(DAY_SECOND FROM CURRENT_DATE);<br>SELECT EXTRACT(HOUR_MINUTE FROM CURRENT_DATE);<br>返回两个日期值之间的差值(月数)：SELECT PERIOD_DIFF(200302,199802);<br>在Mysql中计算年龄：<br>SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(NOW())-TO_DAYS(birthday)),’%Y’)+0 AS age FROM employee;<br>这样，如果Brithday是未来的年月日的话，计算结果为0。<br>下面的SQL语句计算员工的绝对年龄，即当Birthday是未来的日期时，将得到负值。<br>SELECT DATE_FORMAT(NOW(), ‘%Y’) - DATE_FORMAT(birthday, ‘%Y’) -(DATE_FORMAT(NOW(), ‘00-%m-%d’) &lt;DATE_FORMAT(birthday, ‘00-%m-%d’)) AS age from employee</p><h4 id="五、加密函数"><a href="#五、加密函数" class="headerlink" title="五、加密函数"></a>五、加密函数</h4><p>AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储<br>AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果<br>DECODE(str,key)   使用key作为密钥解密加密字符串str<br>ENCRYPT(str,salt)   使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str<br>ENCODE(str,key)   使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储<br>MD5()    计算字符串str的MD5校验和<br>PASSWORD(str)   返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。<br>SHA()    计算字符串str的安全散列算法(SHA)校验和<br>示例：<br>SELECT ENCRYPT(‘root’,’salt’);<br>SELECT ENCODE(‘xufeng’,’key’);<br>SELECT DECODE(ENCODE(‘xufeng’,’key’),’key’);#加解密放在一起<br>SELECT AES_ENCRYPT(‘root’,’key’);<br>SELECT AES_DECRYPT(AES_ENCRYPT(‘root’,’key’),’key’);<br>SELECT MD5(‘123456’);<br>SELECT SHA(‘123456’);</p><h4 id="六、控制流函数"><a href="#六、控制流函数" class="headerlink" title="六、控制流函数"></a>六、控制流函数</h4><p>MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。<br>MySQL控制流函数：<br>CASE WHEN[test1] THEN [result1]…ELSE [default] END如果testN是真，则返回resultN，否则返回default<br>CASE [test] WHEN[val1] THEN [result]…ELSE [default]END  如果test和valN相等，则返回resultN，否则返回default<br>IF(test,t,f)   如果test是真，返回t；否则返回f<br>IFNULL(arg1,arg2) 如果arg1不是空，返回arg1，否则返回arg2<br>NULLIF(arg1,arg2) 如果arg1=arg2返回NULL；否则返回arg1<br>这些函数的第一个是IFNULL()，它有两个参数，并且对第一个参数进行判断。如果第一个参数不是NULL，函数就会向调用者返回第一个参数；如果是NULL,将返回第二个参数。<br>如：SELECT IFNULL(1,2), IFNULL(NULL,10),IFNULL(4*NULL,’false’);<br>NULLIF()函数将会检验提供的两个参数是否相等，如果相等，则返回NULL，如果不相等，就返回第一个参数。<br>如：SELECT NULLIF(1,1),NULLIF(‘A’,’B’),NULLIF(2+3,4+1);<br>和许多脚本语言提供的IF()函数一样，MySQL的IF()函数也可以建立一个简单的条件测试，这个函数有三个参数，第一个是要被判断的表达式，如果表达式为真，IF()将会返回第二个参数，如果为假，IF()将会返回第三个参数。<br>如：SELECTIF(1&lt;10,2,3),IF(56&gt;100,’true’,’false’);<br>IF()函数在只有两种可能结果时才适合使用。然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。在这种情况下，MySQL提供了CASE函数，它和PHP及Perl语言的switch-case条件例程一样。<br>CASE函数的格式有些复杂，通常如下所示：<br>CASE [expression to be evaluated]<br>WHEN [val 1] THEN [result 1]<br>WHEN [val 2] THEN [result 2]<br>WHEN [val 3] THEN [result 3]<br>……<br>WHEN [val n] THEN [result n]<br>ELSE [default result]<br>END<br>这里，第一个参数是要被判断的值或表达式，接下来的是一系列的WHEN-THEN块，每一块的第一个参数指定要比较的值，如果为真，就返回结果。所有的WHEN-THEN块将以ELSE块结束，当END结束了所有外部的CASE块时，如果前面的每一个块都不匹配就会返回ELSE块指定的默认结果。如果没有指定ELSE块，而且所有的WHEN-THEN比较都不是真，MySQL将会返回NULL。<br>CASE函数还有另外一种句法，有时使用起来非常方便，如下：<br>CASE<br>WHEN [conditional test 1] THEN [result 1]<br>WHEN [conditional test 2] THEN [result 2]<br>ELSE [default result]<br>END<br>这种条件下，返回的结果取决于相应的条件测试是否为真。<br>示例：<br>mysql&gt;SELECT CASE ‘green’<br>     WHEN ‘red’ THEN ‘stop’<br>     WHEN ‘green’ THEN ‘go’ END;<br>SELECT CASE 9 WHEN 1 THEN ‘a’ WHEN 2 THEN ‘b’ ELSE ‘N/A’ END;<br>SELECT CASE WHEN (2+2)=4 THEN ‘OK’ WHEN(2+2)&lt;&gt;4 THEN ‘not OK’ END ASSTATUS;<br>SELECT Name,IF((IsActive = 1),’已激活’,’未激活’) AS RESULT FROMUserLoginInfo;<br>SELECT fname,lname,(math+sci+lit) AS total,<br>CASE WHEN (math+sci+lit) &lt; 50 THEN ‘D’<br>WHEN (math+sci+lit) BETWEEN 50 AND 150 THEN ‘C’<br>WHEN (math+sci+lit) BETWEEN 151 AND 250 THEN ‘B’<br>ELSE ‘A’ END<br>AS grade FROM marks;<br>SELECT IF(ENCRYPT(‘sue’,’ts’)=upass,’allow’,’deny’) AS LoginResultFROM users WHERE uname = ‘sue’;#一个登陆验证</p><h4 id="七、格式化函数"><a href="#七、格式化函数" class="headerlink" title="七、格式化函数"></a>七、格式化函数</h4><p>DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值<br>FORMAT(x,y)   把x格式化为以逗号隔开的数字序列，y是结果的小数位数<br>INET_ATON(ip)   返回IP地址的数字表示<br>INET_NTOA(num)   返回数字所代表的IP地址<br>TIME_FORMAT(time,fmt)  依照字符串fmt格式化时间time值<br>其中最简单的是FORMAT()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。<br>示例：<br>SELECT FORMAT(34234.34323432,3);<br>SELECT DATE_FORMAT(NOW(),’%W,%D %M %Y %r’);<br>SELECT DATE_FORMAT(NOW(),’%Y-%m-%d’);<br>SELECT DATE_FORMAT(19990330,’%Y-%m-%d’);<br>SELECT DATE_FORMAT(NOW(),’%h:%i %p’);<br>SELECT INET_ATON(‘10.122.89.47’);<br>SELECT INET_NTOA(175790383);</p><h4 id="八、类型转化函数"><a href="#八、类型转化函数" class="headerlink" title="八、类型转化函数"></a>八、类型转化函数</h4><p>为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED<br>示例：<br>SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;<br>SELECT ‘f’=BINARY ‘F’,’f’=CAST(‘F’ AS BINARY);</p><h4 id="九、系统信息函数"><a href="#九、系统信息函数" class="headerlink" title="九、系统信息函数"></a>九、系统信息函数</h4><p>DATABASE()   返回当前数据库名<br>BENCHMARK(count,expr)  将表达式expr重复运行count次<br>CONNECTION_ID()   返回当前客户的连接ID<br>FOUND_ROWS()   返回最后一个SELECT查询进行检索的总行数<br>USER()或SYSTEM_USER()  返回当前登陆用户名<br>VERSION()   返回MySQL服务器的版本<br>示例：<br>SELECT DATABASE(),VERSION(),USER();<br>SELECTBENCHMARK(9999999,LOG(RAND()<em>PI()));#该例中,MySQL计算LOG(RAND()</em>PI())表达式9999999次。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sql架构与存储引擎&quot;&gt;&lt;a href=&quot;#sql架构与存储引擎&quot; class=&quot;headerlink&quot; title=&quot;sql架构与存储引擎&quot;&gt;&lt;/a&gt;sql架构与存储引擎&lt;/h2&gt;&lt;h3 id=&quot;Qps与Tps&quot;&gt;&lt;a href=&quot;#Qps与Tps&quot; class=&quot;headerlink&quot; title=&quot;Qps与Tps&quot;&gt;&lt;/a&gt;Qps与Tps&lt;/h3&gt;&lt;p&gt;​                TPS: 指服务器每秒处理的事务数 ，&lt;strong&gt;支持事务的存储引擎&lt;/strong&gt;特有的一个性能指标 &lt;/p&gt;&lt;p&gt;TPS = (事务提交+事务回滚）/运行时间&lt;/p&gt;&lt;p&gt;​                QPS:执行sql等待返回结果之间的等待时间&lt;/p&gt;&lt;p&gt;QPS=查询个数/运行时间&lt;/p&gt;&lt;h3 id=&quot;mysqlslap&quot;&gt;&lt;a href=&quot;#mysqlslap&quot; class=&quot;headerlink&quot; title=&quot;mysqlslap&quot;&gt;&lt;/a&gt;mysqlslap&lt;/h3&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="底层深入" scheme="http://yoursite.com/tags/%E5%BA%95%E5%B1%82%E6%B7%B1%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Elastic-Stack相关</title>
    <link href="http://yoursite.com/kawyang/878e527b.html"/>
    <id>http://yoursite.com/kawyang/878e527b.html</id>
    <published>2020-05-15T02:56:06.000Z</published>
    <updated>2020-05-19T10:56:00.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Elastic-Stack"><a href="#安装Elastic-Stack" class="headerlink" title="安装Elastic Stack"></a>安装Elastic Stack</h1><p>准备一台虚拟机，（最好3G内存以上，不然会很卡，很卡很卡）</p><ol><li>准备docker环境</li></ol><h6 id="安装docker环境"><a href="#安装docker环境" class="headerlink" title="安装docker环境"></a>安装docker环境</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装docker </span></span><br><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure><h6 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 输入命令行 </span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">// 配置权限</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">// 查看版本</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><a id="more"></a><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-fb183f33f4842212.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1016/format/webp"></p><p>01.png</p><ol><li>配置运行时需要的变量</li></ol><h6 id="创建容器间交互的-桥接式网络-elk-demo-network"><a href="#创建容器间交互的-桥接式网络-elk-demo-network" class="headerlink" title="创建容器间交互的 桥接式网络 elk_demo_network"></a>创建容器间交互的 桥接式网络 elk_demo_network</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create elk_demo_network</span><br></pre></td></tr></table></figure><p>创建网络 异常 Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br> 使用sudo启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>查看网络创建情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-7cf1bd97a12f22bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/958/format/webp"></p><p>02.png</p><h6 id="配置es需要的-变量-避免es异常"><a href="#配置es需要的-变量-避免es异常" class="headerlink" title="配置es需要的 变量 避免es异常"></a>配置es需要的 变量 避免es异常</h6><p>es 异常 exit code 78 解决方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=524288</span><br></pre></td></tr></table></figure><p>es需要的内存很大 ，可以通过 修改环境变量 获取配置 虚拟机内存处理</p><ol><li>配置基本完成 配置docker-compose （PS：注意文件目录问题 此处文件放在 /root/elk_demo）</li></ol><p>创建docker-compose.yml<br> 进入到目录 /root/elk_demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2.2'</span></span><br><span class="line">services:</span><br><span class="line"><span class="comment"># nginx -- start</span></span><br><span class="line">  nginx01:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx01</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"80:80"</span></span><br><span class="line">    environment:</span><br><span class="line">      - NGINX_HOST=foobar.com</span><br><span class="line">      - NGINX_PORT=80</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">    volumes:</span><br><span class="line"><span class="comment">#      - /root/elk_demo/nginx/mysite.template:/etc/nginx/conf.d/mysite.template </span></span><br><span class="line">      - /root/elk_demo/nginx/logs/:/var/<span class="built_in">log</span>/nginx/  </span><br><span class="line">      - /root/elk_demo/nginx/configs/:/etc/nginx/conf.d/   <span class="comment"># if would open this setting, you should put a 'default.conf' file in your configs dir. </span></span><br><span class="line"><span class="comment"># nginx -- end</span></span><br><span class="line"><span class="comment"># elasticsearch cluster -- start </span></span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - discovery.seed_hosts=es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">"ES_JAVA_OPTS=-Xms128m -Xmx128m"</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - discovery.seed_hosts=es01</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">"ES_JAVA_OPTS=-Xms128m -Xmx128m"</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"><span class="comment"># elasticsearch cluster -- end</span></span><br><span class="line"><span class="comment"># kibana -- start</span></span><br><span class="line">  kibana01:</span><br><span class="line">    image: docker.elastic.co/kibana/kibana:7.4.0</span><br><span class="line">    container_name: kibana01</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    ports:</span><br><span class="line">      - 5601:5601</span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#          - ELASTICSEARCH_HOSTS=http://es01:9200</span></span><br><span class="line"><span class="comment">#          - I18N_LOCALE=zh-CN</span></span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/elk_demo/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml</span><br><span class="line">    depends_on:</span><br><span class="line">      - es01</span><br><span class="line"><span class="comment"># kibana -- end</span></span><br><span class="line"><span class="comment"># filebeat -- start</span></span><br><span class="line">  filebeat01:</span><br><span class="line">    image: docker.elastic.co/beats/filebeat:7.4.0</span><br><span class="line">    container_name: filebeat01</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#    #      - ES_HOST=es01</span></span><br><span class="line"><span class="comment">#    #      - ES_PORT=9200</span></span><br><span class="line"><span class="comment">#    #      - KIBANA_HOST=kibana</span></span><br><span class="line"><span class="comment">#    #      - KIBANA_PORT=5601</span></span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/elk_demo/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml</span><br><span class="line">      - /root/elk_demo/nginx/logs:/var/<span class="built_in">log</span>/</span><br><span class="line">      - /root/elk_demo/filebeat/modules.d/:/usr/share/filebeat/modules.d/</span><br><span class="line">    depends_on:</span><br><span class="line">      - es01</span><br><span class="line">      - kibana01</span><br><span class="line"><span class="comment"># filebeat -- end</span></span><br><span class="line"><span class="comment"># metricbeat -- start</span></span><br><span class="line">  metricbeat02:</span><br><span class="line">    image: docker.elastic.co/beats/metricbeat:7.4.0</span><br><span class="line">    container_name: metricbeat02</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - ES_HOST=es01</span></span><br><span class="line"><span class="comment">#      - ES_PORT=9200</span></span><br><span class="line"><span class="comment">#      - KIBANA_HOST=kibana</span></span><br><span class="line"><span class="comment">#      - KIBANA_PORT=5601</span></span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/elk_demo/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock:ro</span><br><span class="line">      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro</span><br><span class="line">      - /proc:/hostfs/proc:ro</span><br><span class="line">      - /:/hostfs:ro</span><br><span class="line">      - /root/elk_demo/metricbeat/modules.d/:/usr/share/metricbeat/modules.d/</span><br><span class="line">    depends_on:</span><br><span class="line">      - es01</span><br><span class="line">      - kibana01</span><br><span class="line"><span class="comment"># metricbeat -- end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  esdata01:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  esdata02:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  esnet:</span><br><span class="line">    external:</span><br><span class="line">      name: elk_demo_network</span><br></pre></td></tr></table></figure><p>创建docker-compose.yml 之后。开始处理相关的配置文件 。这边试验对象 是nginx 所以需要配置nginx 的相关配置</p><h6 id="nginx-相关配置"><a href="#nginx-相关配置" class="headerlink" title="nginx 相关配置"></a>nginx 相关配置</h6><p>根据 docker-compose.yml 可以看出 nginx 的配置环境变量的目录 在 /root/elk_demo/nginx/configs/。其实此处可以不配置 ，也可以使用，配置的目的是为了更好的操作配置文件，另一个就是为了 下面的 metribeat做实验铺垫</p><p>进入到 目录 /root/elk_demo/nginx/configs<br> 创建文件 metricbeat.conf</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">metricbeat</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#charset koi8-r;</span></span><br><span class="line">    <span class="meta">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nginx-status &#123;</span><br><span class="line">        stub_status <span class="keyword">on</span>;</span><br><span class="line">    access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta"># redirect server <span class="meta-keyword">error</span> pages to the static page /50x.html</span></span><br><span class="line">    <span class="meta">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Kibana-相关配置"><a href="#Kibana-相关配置" class="headerlink" title="Kibana 相关配置"></a>Kibana 相关配置</h6><p>同上 在目录</p><p>vi /root/elk_demo/kibana/kibana.yml</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i18n</span><span class="selector-class">.locale</span>: <span class="selector-tag">zh-CN</span> </span><br><span class="line"><span class="selector-tag">server</span><span class="selector-class">.name</span>: <span class="selector-tag">kibana</span></span><br><span class="line"><span class="selector-tag">server</span><span class="selector-class">.host</span>: "0"</span><br><span class="line"><span class="selector-tag">elasticsearch</span><span class="selector-class">.hosts</span>: <span class="selector-attr">[ "http://es01:9200" ]</span></span><br><span class="line"><span class="selector-tag">xpack</span><span class="selector-class">.monitoring</span><span class="selector-class">.ui</span><span class="selector-class">.container</span><span class="selector-class">.elasticsearch</span><span class="selector-class">.enabled</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure><h6 id="filebeat-相关配置"><a href="#filebeat-相关配置" class="headerlink" title="filebeat 相关配置"></a>filebeat 相关配置</h6><p>vi /root/elk_demo/filebeat/filebeat.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    hosts: [<span class="string">"es01:9200"</span>] </span><br><span class="line"></span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup.template.settings:</span><br><span class="line">   index.number_of_shards: 3</span><br><span class="line"></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"kibana01:5601"</span></span><br></pre></td></tr></table></figure><p>此外，为了配置 nginx 仪表盘 所以还需要配置 nginx的配置文件<br> 创建目录 /root/elk_demo/filebeat/modules.d</p><p>vi  /root/elk_demo/filebeat/modules.d/nginx.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">module</span>: nginx</span><br><span class="line">  access:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">var</span>.paths: [<span class="string">"/var/log/access.log*"</span>]</span><br><span class="line"></span><br><span class="line">  error:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">var</span>.paths: [<span class="string">"/var/log/error.log*"</span>]</span><br></pre></td></tr></table></figure><h6 id="metricbeat-相关配置"><a href="#metricbeat-相关配置" class="headerlink" title="metricbeat 相关配置"></a>metricbeat 相关配置</h6><p>vi /root/elk_demo/metricbeat/metricbeat.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">    hosts: [<span class="string">"es01:9200"</span>]</span><br><span class="line"></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"kibana01:5601"</span></span><br><span class="line"></span><br><span class="line">metricbeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br></pre></td></tr></table></figure><p>同上 配置 Nginx 仪表盘</p><p>vi  /root/elk_demo/metricbeat/modules.d/nginx.yml</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Module: nginx</span></span><br><span class="line"><span class="meta"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/7.4/metricbeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line">  <span class="meta">#metricsets:</span></span><br><span class="line">  <span class="meta">#  - stubstatus</span></span><br><span class="line">  period: <span class="number">10</span>s</span><br><span class="line"></span><br><span class="line">  <span class="meta"># Nginx hosts</span></span><br><span class="line">  hosts: [<span class="string">"nginx01:80"</span>]</span><br><span class="line"></span><br><span class="line">  <span class="meta"># Path to server status. Default server-status</span></span><br><span class="line">  server_status_path: <span class="string">"nginx-status"</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#username: <span class="meta-string">"user"</span></span></span><br><span class="line">  <span class="meta">#password: <span class="meta-string">"secret"</span></span></span><br></pre></td></tr></table></figure><p>vi  /root/elk_demo/metricbeat/modules.d/system.yml</p><p>配置 system 仪表盘</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Module: system</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/7.4/metricbeat-module-system.html</span></span><br><span class="line"></span><br><span class="line">- <span class="class"><span class="keyword">module</span>: <span class="title">system</span></span></span><br><span class="line">  <span class="symbol">period:</span> <span class="number">10</span>s</span><br><span class="line">  <span class="symbol">metricsets:</span></span><br><span class="line">    - cpu</span><br><span class="line">    - load</span><br><span class="line">    - memory</span><br><span class="line">    - network</span><br><span class="line">    - process</span><br><span class="line">    - process_summary</span><br><span class="line">    - socket_summary</span><br><span class="line">    <span class="comment">#- entropy</span></span><br><span class="line">    <span class="comment">#- core</span></span><br><span class="line">    <span class="comment">#- diskio</span></span><br><span class="line">    <span class="comment">#- socket</span></span><br><span class="line">  process.<span class="symbol">include_top_n:</span></span><br><span class="line">    <span class="symbol">by_cpu:</span> <span class="number">5</span>      <span class="comment"># include top 5 processes by CPU</span></span><br><span class="line">    <span class="symbol">by_memory:</span> <span class="number">5</span>   <span class="comment"># include top 5 processes by memory</span></span><br><span class="line"></span><br><span class="line">- <span class="class"><span class="keyword">module</span>: <span class="title">system</span></span></span><br><span class="line">  <span class="symbol">period:</span> <span class="number">1</span>m</span><br><span class="line">  <span class="symbol">metricsets:</span></span><br><span class="line">    - filesystem</span><br><span class="line">    - fsstat</span><br><span class="line">  <span class="symbol">processors:</span></span><br><span class="line">  - drop_event.<span class="keyword">when</span>.<span class="symbol">regexp:</span></span><br><span class="line">      system.filesystem.<span class="symbol">mount_point:</span> <span class="string">'^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'</span></span><br><span class="line"></span><br><span class="line">- <span class="class"><span class="keyword">module</span>: <span class="title">system</span></span></span><br><span class="line">  <span class="symbol">period:</span> <span class="number">15</span>m</span><br><span class="line">  <span class="symbol">metricsets:</span></span><br><span class="line">    - uptime</span><br><span class="line"></span><br><span class="line"><span class="comment">#- module: system</span></span><br><span class="line"><span class="comment">#  period: 5m</span></span><br><span class="line"><span class="comment">#  metricsets:</span></span><br><span class="line"><span class="comment">#    - raid</span></span><br><span class="line"><span class="comment">#  raid.mount_point: '/'</span></span><br></pre></td></tr></table></figure><h6 id="各项准备完成-开始最终步骤-启动"><a href="#各项准备完成-开始最终步骤-启动" class="headerlink" title="各项准备完成 开始最终步骤 启动"></a>各项准备完成 开始最终步骤 启动</h6><p>进入 /root/elk_demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//删除kibana索引</span><br><span class="line">curl -XDELETE http://localhost:9200/.kibana*</span><br><span class="line">//运行</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-cae0d20a3f36dcc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/736/format/webp"></p><p>03.png</p><hr><p>测试</p><p>访问：<span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguNjIuMTQ0Lw==" title="http://192.168.62.144/">http://192.168.62.144/<i class="fa fa-external-link"></i></span> 验证nginx<br> 访问：<span class="exturl" data-url="aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwJTNBJTJGJTJGMTkyLjE2OC42Mi4xNDQlMkZuZ2lueC1zdGF0dXM=" title="https://links.jianshu.com/go?to=http%3A%2F%2F192.168.62.144%2Fnginx-status">http://192.168.62.144/nginx-status<i class="fa fa-external-link"></i></span> 验证nginx 心跳<br> 访问：<span class="exturl" data-url="aHR0cDovLzE5Mi4xNjguNjIuMTQ0OjU2MDE=" title="http://192.168.62.144:5601">http://192.168.62.144:5601<i class="fa fa-external-link"></i></span> 验证kibana</p><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-31dd538b79de5ff0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p><p>05.png</p><h6 id="安装Nginx-仪表盘"><a href="#安装Nginx-仪表盘" class="headerlink" title="安装Nginx 仪表盘"></a>安装Nginx 仪表盘</h6><p>确认之前的 beats 配置是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模块配置信息</span></span><br><span class="line">docker <span class="built_in">exec</span> 容器ID ./filebeat modules list</span><br><span class="line">docker <span class="built_in">exec</span> 容器ID ./metricbeat modules list</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装仪表盘</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> 容器ID ./filebeat setup --dashboards</span><br><span class="line">docker <span class="built_in">exec</span> 容器ID ./metricbeat setup --dashboards</span><br></pre></td></tr></table></figure><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-c5661d4469e8778d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/775/format/webp"></p><p>配置仪表盘</p><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-284ac77da8c13a51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p><p>01</p><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-b9c70493991730d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p><p>08.png</p><p><img alt="img" data-src="https:////upload-images.jianshu.io/upload_images/14387783-eadf581f70b2612c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p><p>10.png</p><p>以上就完成了使用 Beats+ES+Kibana 完成 Nginx 运行监控</p><h1 id="kibana简单使用"><a href="#kibana简单使用" class="headerlink" title="kibana简单使用"></a>kibana简单使用</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Elastic-Stack&quot;&gt;&lt;a href=&quot;#安装Elastic-Stack&quot; class=&quot;headerlink&quot; title=&quot;安装Elastic Stack&quot;&gt;&lt;/a&gt;安装Elastic Stack&lt;/h1&gt;&lt;p&gt;准备一台虚拟机，（最好3G内存以上，不然会很卡，很卡很卡）&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;准备docker环境&lt;/li&gt;
&lt;/ol&gt;&lt;h6 id=&quot;安装docker环境&quot;&gt;&lt;a href=&quot;#安装docker环境&quot; class=&quot;headerlink&quot; title=&quot;安装docker环境&quot;&gt;&lt;/a&gt;安装docker环境&lt;/h6&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 安装docker &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h6 id=&quot;安装Docker-Compose&quot;&gt;&lt;a href=&quot;#安装Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;安装Docker Compose&quot;&gt;&lt;/a&gt;安装Docker Compose&lt;/h6&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 输入命令行 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo curl -L &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-&lt;span class=&quot;variable&quot;&gt;$(uname -s)&lt;/span&gt;-&lt;span class=&quot;variable&quot;&gt;$(uname -m)&lt;/span&gt;&quot;&lt;/span&gt; -o /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 配置权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod +x /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 查看版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="主流框架" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的入门</title>
    <link href="http://yoursite.com/kawyang/3b8ce786.html"/>
    <id>http://yoursite.com/kawyang/3b8ce786.html</id>
    <published>2020-05-08T07:09:02.000Z</published>
    <updated>2020-05-19T10:57:13.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，RabbitMQ的介绍与安装"><a href="#一，RabbitMQ的介绍与安装" class="headerlink" title="一，RabbitMQ的介绍与安装"></a>一，RabbitMQ的介绍与安装</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​            RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议 来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布 /订阅）、可靠性、安全。AMQP协议更多用在企业系统内，对数据_致 性、稳定性和可靠性要求很髙的场景，对性能和吞吐量的要求还在其次。</p><a id="more"></a><p><strong>与其他mq的比较</strong></p><pre><code>activiMq老牌消息中间件，api全面，但是吞吐量不大Kafaka吞吐量大，但是数据无法保证不丢失，主要面向大数据rokectMQ：吞吐量大，保证数据不丢失，并且支持分布式事物，但是商业版需要收费rabbitMQ：吞吐量大，数据不易丢失</code></pre><p><strong>初识RabbitMQ:</strong></p><blockquote><p>RabbitMQ是—个开源的消息代理和队列服务器，用来通过普通协议 在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写 的，并且RabbitMQ是基于AMQP协议的。</p></blockquote><p><strong>哪些大厂在用RabbitMQ,为什幺？</strong></p><blockquote><p>滴滴、美团、头条、去哪儿、艺龙……</p><p>开源、性能优秀，稳定性保障</p><p>提供可靠性消息投递模式（confirm)、返回模式（return )</p><p>与SpringAMQP完美的整合、API丰富</p><p>集群模式丰富，表达式配置，HA模式，镜像队列模型</p><p>保证数据不丟失的前提做到高可靠性、可用性</p></blockquote><p><strong>RabbitMQ高性能的原因？</strong></p><blockquote><p><strong>Erlang语言</strong>最初在于交换机领域的架构模式，这样使得 RabbitMQ在Broker之间进行数据交互的性能是非常优秀的</p><p>Erlang的优点：<strong>Erlang有着和原生Socket—样的延迟</strong></p></blockquote><p><strong>什么是AMQP高级消息队列协议？</strong></p><p>　　<strong>AMQP定义：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是具有现代特征的二进制协议；</span><br><span class="line">是一个提供统一消息服务的应用层标准高级消息队列协议；</span><br><span class="line">是应用层协议的一个开放标准，为面向消息的中间件设计；</span><br></pre></td></tr></table></figure><h4 id="RabbitMQ的安装与使用"><a href="#RabbitMQ的安装与使用" class="headerlink" title="RabbitMQ的安装与使用"></a>RabbitMQ的安装与使用</h4><p>因为RabbitMQ是基于Erlang的所以对他的安装要先安装Erlang，然后在进行RabbitMQ的安装 但是要<strong>注意RabbitMQ的版本一定要与Erlang的版本对应 否则将会出现错误！</strong></p><table><thead><tr><th>RabbitMQ版本</th><th>Erlang最低要求</th><th>Erlang最高要求</th></tr></thead><tbody><tr><td>3.7.7 - 3.7.12</td><td>20.3.x</td><td>21.x</td></tr><tr><td>3.7.0 - 3.7.6</td><td>19.3</td><td>20.3.x</td></tr></tbody></table><p><strong>下载Erlang</strong></p><p>​    <span class="exturl" data-url="aHR0cDovL3d3dy5lcmxhbmcub3JnL2Rvd25sb2Fkcw==" title="http://www.erlang.org/downloads">官网下载地址<i class="fa fa-external-link"></i></span>但是个人不推荐官网下载，因为Erlang官网在国外的原因下载会特别的慢</p><p><img alt="1588922880637" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588922880637.png"></p><p><strong>下载RabbitMQ</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JhYmJpdG1xL3JhYmJpdG1xLXNlcnZlci90YWdz" title="https://github.com/rabbitmq/rabbitmq-server/tags">官方git地址<i class="fa fa-external-link"></i></span>直接下载即可</p><p><img alt="1588923074328" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588923074328.png"></p><p><strong>两个软件安装的话一直下一步即可</strong></p><p>安装完成之后需要配置Erlang的环境变量</p><p><img alt="1588923359657" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588923359657.png"></p><p>配好环境变量以后找到RabbitMQ安装路径</p><p><img alt="1588923496376" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588923496376.png"></p><p>也可以在菜单处打开</p><p><img alt="1588923467960" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588923467960.png"></p><p>以管理员身份运行RabbitMQ Command Prompt (sbin dir) <strong>一定要以管理员身份运行</strong></p><p>在打开的黑窗口中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p> 命令</p><p><img alt="1588923647762" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588923647762.png"></p><p>加载完毕后启动服务即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">net start RabbitMQ</span><br><span class="line">#停止服务</span><br><span class="line">net stop RabbitMQ</span><br></pre></td></tr></table></figure><p>然后访问浏览器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:15672</span><br></pre></td></tr></table></figure><p>出现如下页面</p><p><img alt="1588924048369" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588924048369.png"></p><p>默认账号密码是     guest</p><p>登录进去 添加一个admin账户还有对应一个测试用的虚拟主机</p><p>添加用户</p><p><img alt="1588926208949" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588926208949.png"></p><p>添加虚拟主机</p><p><img alt="1588926263239" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588926263239.png"></p><p>为账户绑定虚拟机</p><p><img alt="1588926370839" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588926370839.png"></p><p><img alt="1588926419418" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588926419418.png"></p><p><img alt="1588926614652" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588926614652.png"></p><p><strong>RabbitMQ默认端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4369 -- erlang发现口</span><br><span class="line">5672 --client端通信口</span><br><span class="line">15672 -- 管理界面ui端口</span><br><span class="line">25672 -- server间内部通信口</span><br></pre></td></tr></table></figure><h2 id="二，RabbitMQ入门案例"><a href="#二，RabbitMQ入门案例" class="headerlink" title="二，RabbitMQ入门案例"></a>二，RabbitMQ入门案例</h2><p>1，新建项目导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2，工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"q_test_01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"dsztest"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3,  新建消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.QueueingConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(ConnectionUtil.QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听队列</span></span><br><span class="line">        channel.basicConsume(ConnectionUtil.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取消息</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            QueueingConsumer.Delivery delivery = consumer.nextDelivery();</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4,  新建服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        channel.queueDeclare(ConnectionUtil.QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"你能随时收到么？"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, ConnectionUtil.QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5，测试：</p><p><img alt="1588924589956" data-src="D:%5Chexo%5Csource_posts%5CRabbitMQ%E7%9A%84%E5%85%A5%E9%97%A8%5C1588924589956.png"></p><p>接收成功！</p><p>6，总结</p><p>​        服务消费者一共分为7个步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 获取到连接以及mq通道</span><br><span class="line">2. 从连接中创建通道</span><br><span class="line">3. 声明队列</span><br><span class="line">4. 定义队列的消费者</span><br><span class="line">5. 监听队列</span><br><span class="line">6. 获取消息</span><br><span class="line">7. 关闭通道和连接(本案例中没有定义)</span><br></pre></td></tr></table></figure><p>​        服务提供者一共分为5个步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 获取到连接以及mq通道</span><br><span class="line">2. 从连接中创建通道</span><br><span class="line">3. 声明队列</span><br><span class="line">4. 发送消息内容</span><br><span class="line">5. 关闭通道和连接</span><br></pre></td></tr></table></figure><p>可以看到在代码中服务提供者与服务消费者前3个步骤都是一样的，是对服务器进行连接然后再进行对应的逻辑处理最后再进行关闭，代码结构简单，但是有的时候可能在运行业务代码的时候突然出现异常 服务中止 但是消息中间件以及标记为正确并返回了 这样数据的原子性就会遭到破坏，要避免这种情况怎么办呢？ 切换自动确认为手动确认即可</p><p>手动确认消息设置：</p><ul><li><pre><code>channel.basicConsume(QUEUE_NAME, true, consumer);1 修改消费者 /** - 消费者,手动进行ACK   */   public class Recv2 {   private final static String QUEUE_NAME = &quot;simple_queue&quot;;   public static void main(String[] argv) throws Exception {       // 获取到连接       Connection connection = ConnectionUtil.getConnection();       // 创建通道       final Channel channel = connection.createChannel();       // 声明队列       channel.queueDeclare(QUEUE_NAME, false, false, false, null);       // 定义队列的消费者       DefaultConsumer consumer = new DefaultConsumer(channel) {       // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用           @Override           public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body) throws IOException {               // body 即消息体               //int i = 1/0;               String msg = new String(body);               System.out.println(&quot;received : &quot; + msg + &quot;!&quot;); <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>       // 手动进行ACK       channel.basicAck(envelope.getDeliveryTag(), false);   }};// 监听队列，第二个参数false，手动进行ACKchannel.basicConsume(QUEUE_NAME, false, consumer);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>启动生产者，debug启动消费者</p><p>可以看到在确认之后消息被消费掉<br>同样制造异常：int i = 1/0;，启动生产者，消费者，可以看到消息并没有被消息掉</p><p>二、工作模型</p><p>在一个生产者，多个消费者的情况下，消费者根据处理任务的性能，合理分配消息的处理，让线程睡眠一秒模拟性能差的消费者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class Recv &#123;</span><br><span class="line">    private final static String QUEUE_NAME = &quot;test_work_queue&quot;;</span><br><span class="line">public static void main(String[] argv) throws Exception &#123;</span><br><span class="line">    // 获取到连接</span><br><span class="line">    Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">    // 获取通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 声明队列</span><br><span class="line">    channel.queueDeclare(QUEUE_NAME, false, false, false, null);</span><br><span class="line">    // 设置每个消费者同时只能处理一条消息，即处理完一条消息任务之后，在消费另一条消息，执行另一个任务，而不是消息所有消息</span><br><span class="line">    channel.basicQos(1);</span><br><span class="line">    // 定义队列的消费者</span><br><span class="line">    DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,</span><br><span class="line">                byte[] body) throws IOException &#123;</span><br><span class="line">            // body 即消息体</span><br><span class="line">            String msg = new String(body);</span><br><span class="line">            System.out.println(&quot; [消费者1] received : &quot; + msg + &quot;!&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                // 模拟完成任务的耗时：1000ms</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            // 手动ACK</span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 监听队列。</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Recv2 &#123;</span><br><span class="line">    private final static String QUEUE_NAME = &quot;test_work_queue&quot;;</span><br><span class="line"></span><br><span class="line">public static void main(String[] argv) throws Exception &#123;</span><br><span class="line">    // 获取到连接</span><br><span class="line">    Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">    // 获取通道</span><br><span class="line">    final Channel channel = connection.createChannel();</span><br><span class="line">    // 声明队列</span><br><span class="line">    channel.queueDeclare(QUEUE_NAME, false, false, false, null);</span><br><span class="line">    // 设置每个消费者同时只能处理一条消息，即处理完一条消息任务之后，在消费另一条消息，执行另一个任务，而不是消息所有消息</span><br><span class="line">    channel.basicQos(1);</span><br><span class="line">    // 定义队列的消费者</span><br><span class="line">    DefaultConsumer consumer = new DefaultConsumer(channel) &#123;</span><br><span class="line">        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span><br><span class="line">        @Override</span><br><span class="line">        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,</span><br><span class="line">                byte[] body) throws IOException &#123;</span><br><span class="line">            // body 即消息体</span><br><span class="line">            String msg = new String(body);</span><br><span class="line">            System.out.println(&quot; [消费者2] received : &quot; + msg + &quot;!&quot;);</span><br><span class="line">            // 手动ACK</span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(), false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 监听队列。</span><br><span class="line">    channel.basicConsume(QUEUE_NAME, false, consumer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者循环生产50条消息，两个消费者消费消息情况如下</p><p>三、 消息发布订阅-Fanout</p><p>生产者</p><p>public class Send {<br>    private final static String EXCHANGE_NAME = “fanout_exchange_test”;</p><pre><code>public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明交换机exchange，指定类型为fanout    channel.exchangeDeclare(EXCHANGE_NAME, &quot;fanout&quot;);    // 消息内容    String message = &quot;Hello everyone&quot;;    // 发布消息到Exchange    channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, null, message.getBytes());    System.out.println(&quot; [生产者] Sent &apos;&quot; + message + &quot;&apos;&quot;);    channel.close();    connection.close();}}消费者一public class Recv {    private final static String QUEUE_NAME = &quot;fanout_exchange_queue_1&quot;;    private final static String EXCHANGE_NAME = &quot;fanout_exchange_test&quot;;public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明队列    channel.queueDeclare(QUEUE_NAME, false, false, false, null);    // 绑定队列到交换机    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);    // 定义队列的消费者    DefaultConsumer consumer = new DefaultConsumer(channel) {        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用        @Override        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,                byte[] body) throws IOException {            // body 即消息体            String msg = new String(body);            System.out.println(&quot; [消费者1] received : &quot; + msg + &quot;!&quot;);        }    };    // 监听队列，自动返回完成    channel.basicConsume(QUEUE_NAME, true, consumer);}</code></pre><p>}</p><p>消费者二</p><pre><code>public class Recv2 {    private final static String QUEUE_NAME = &quot;fanout_exchange_queue_2&quot;;    private final static String EXCHANGE_NAME = &quot;fanout_exchange_test&quot;;public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明队列    channel.queueDeclare(QUEUE_NAME, false, false, false, null);    // 绑定队列到交换机    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;);    // 定义队列的消费者    DefaultConsumer consumer = new DefaultConsumer(channel) {        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用        @Override        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,                byte[] body) throws IOException {            // body 即消息体            String msg = new String(body);            System.out.println(&quot; [消费者2] received : &quot; + msg + &quot;!&quot;);        }    };    // 监听队列，手动返回完成    channel.basicConsume(QUEUE_NAME, true, consumer);}</code></pre><p>}</p><p>由于这消费者方是直接将队列绑定到交换机，并没有声明交换机，所以先启动生产者，此时消息将丢失，启动消费者后再启动生产者<br>第一次启动生产者：</p><p>启动两个消费者</p><p>再次启动生产者</p><p>四、发布订阅-direct</p><p>在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）。消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。<br>定义两个消费者，指定routing key为不同的类型</p><pre><code>public class Recv {    private final static String QUEUE_NAME = &quot;direct_exchange_queue_1&quot;;    private final static String EXCHANGE_NAME = &quot;direct_exchange_test&quot;;public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明队列    channel.queueDeclare(QUEUE_NAME, false, false, false, null);    // 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;update&quot;);    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;delete&quot;);    // 定义队列的消费者    DefaultConsumer consumer = new DefaultConsumer(channel) {        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用        @Override        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,                byte[] body) throws IOException {            // body 即消息体            String msg = new String(body);            System.out.println(&quot; [消费者1] received : &quot; + msg + &quot;!&quot;);        }    };    // 监听队列，自动ACK    channel.basicConsume(QUEUE_NAME, true, consumer);}}public class Recv2 {    private final static String QUEUE_NAME = &quot;direct_exchange_queue_2&quot;;    private final static String EXCHANGE_NAME = &quot;direct_exchange_test&quot;;public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明队列    channel.queueDeclare(QUEUE_NAME, false, false, false, null);    // 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;insert&quot;);    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;update&quot;);    channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;delete&quot;);    // 定义队列的消费者    DefaultConsumer consumer = new DefaultConsumer(channel) {        // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用        @Override        public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,                byte[] body) throws IOException {            // body 即消息体            String msg = new String(body);            System.out.println(&quot; [消费者2] received : &quot; + msg + &quot;!&quot;);        }    };    // 监听队列，自动ACK    channel.basicConsume(QUEUE_NAME, true, consumer);}</code></pre><p>}</p><p>消息生产者，先生产一条routing key为update的消息</p><pre><code>public class Send {    private final static String EXCHANGE_NAME = &quot;direct_exchange_test&quot;;public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明exchange，指定类型为direct    channel.exchangeDeclare(EXCHANGE_NAME, &quot;direct&quot;);    // 消息内容    String message = &quot;商品修改， id = 1001&quot;;    // 发送消息，并且指定routing key 为：insert ,代表新增商品    channel.basicPublish(EXCHANGE_NAME, &quot;update&quot;, null, message.getBytes());    System.out.println(&quot; [商品服务：] Sent &apos;&quot; + message + &quot;&apos;&quot;);    channel.close();    connection.close();}</code></pre><p>}</p><p>再次发送一条routing key为insert的消息，由于消费者一并没有订阅routing key为insert的消息，所以将不会有打印输出</p><p>五、发布订阅-topic<br>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候使用通配符<br>通配符规则：<br>#：匹配一个或多个词<br><em>：只能匹配一个词<br>例如：<br>abc.#：能够匹配abc.de.fg 或者 abc.defg<br>abc.</em>：只能匹配abc.de</p><p>使用topic类型的Exchange，发送消息的routing key有3种： item.isnert、item.update、item.delete：</p><p>public class Send {<br>    private final static String EXCHANGE_NAME = “topic_exchange_test”;</p><pre><code>public static void main(String[] argv) throws Exception {    // 获取到连接    Connection connection = ConnectionUtil.getConnection();    // 获取通道    Channel channel = connection.createChannel();    // 声明exchange，指定类型为topic, 交换机持久化    channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;,true);    // 消息内容    String message = &quot;新增商品 : id = 1001&quot;;    // 1、发送消息到交换机 2、指定routing key为:insert,代表新增商品 3、消息持久化 4、消息体    channel.basicPublish(EXCHANGE_NAME, &quot;item.insert&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());    System.out.println(&quot; [商品服务：] Sent &apos;&quot; + message + &quot;&apos;&quot;);    channel.close();    connection.close();}</code></pre><ul><li><p>消费者1</p></li><li><p>/<br>public class Recv {<br>  private final static String QUEUE_NAME = “topic_exchange_queue_1”;<br>  private final static String EXCHANGE_NAME = “topic_exchange_test”;</p><p>  public static void main(String[] argv) throws Exception {</p><pre><code>// 获取到连接Connection connection = ConnectionUtil.getConnection();// 获取通道Channel channel = connection.createChannel();// 声明队列, 声明队列持久化channel.queueDeclare(QUEUE_NAME, true, false, false, null);// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、deletechannel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.update&quot;);channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.delete&quot;);// 定义队列的消费者DefaultConsumer consumer = new DefaultConsumer(channel) {    // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用    @Override    public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,            byte[] body) throws IOException {        // body 即消息体        String msg = new String(body);        System.out.println(&quot; [消费者1] received : &quot; + msg + &quot;!&quot;);    }};// 监听队列，自动ACKchannel.basicConsume(QUEUE_NAME, true, consumer);</code></pre><p>  }<br>}</p></li></ul><p>/**</p><ul><li>消费者2</li><li>/</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    public class Recv2 &#123;</span><br><span class="line">private final static String QUEUE_NAME = &quot;topic_exchange_queue_2&quot;;</span><br><span class="line">    private final static String EXCHANGE_NAME = &quot;topic_exchange_test&quot;;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] argv) throws Exception &#123;</span><br><span class="line">        // 获取到连接</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        // 获取通道</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        // 声明队列，指定队列持久化</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, true, false, false, null);</span><br></pre></td></tr></table></figure><pre><code>// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、deletechannel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;item.*&quot;);// 定义队列的消费者DefaultConsumer consumer = new DefaultConsumer(channel) {    // 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用    @Override    public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties,            byte[] body) throws IOException {        // body 即消息体        String msg = new String(body);        System.out.println(&quot; [消费者2] received : &quot; + msg + &quot;!&quot;);    }</code></pre><p>};<br>// 监听队列，自动ACK<br>channel.basicConsume(QUEUE_NAME, true, consumer);<br>​```</p><p>}<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此时，消费者2能够接受的routing key是item.*，他能接受以item开头的消息，消费者1没使用通配符，只能接受指定的类型消息，所以消费者1不能接受到routing key是item.insert*的消息</span><br><span class="line"></span><br><span class="line">六、消息的持久化</span><br><span class="line">队列、Exchange、消息都持久化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 三，Spring AMQP简单入门</span><br></pre></td></tr></table></figure><p>yml.xml</p><p>spring:<br>  rabbitmq:<br>    host: 192.168.248.131<br>    username: admin<br>    password: admin<br>    virtual-host: </p><pre><code>//启动类</code></pre><p>@SpringBootApplication<br>public class Application {<br>    public static void main(String[] args) {<br>        SpringApplication.run(Application.class, args);<br>    }<br>}</p><p>消费者</p><p>/**</p><ul><li>作为消费者<br>*/<br>@Component<br>public class Listener {<br>// 用注解声明这是一个监听者的注解<br>@RabbitListener(bindings = @QueueBinding(<pre><code>// 绑定队列，声明队列持久化value = @Queue(value = &quot;spring.test.queue&quot;, durable = &quot;true&quot;),// 绑定交换机exchange = @Exchange(        value = &quot;spring.test.exchange&quot;,// 交换机的名字        ignoreDeclarationExceptions = &quot;true&quot;,// 忽略声明异常，使用已有的交换机        type = ExchangeTypes.TOPIC // 交换机的类型),// 指定RoutingKeykey = {&quot;#.#&quot;}))</code></pre>public void listen(String msg){<pre><code>System.out.println(&quot;接收到消息：&quot; + msg);</code></pre>}<br>}<br>生产者</li></ul><p>@RunWith(SpringRunner.class)<br>@SpringBootTest(classes = Application.class)<br>public class MqDemo {</p><p>// 通过模板amqpTemplate对象的convertAndSend()方法发送消息<br>@Autowired<br>private AmqpTemplate amqpTemplate;</p><p>@Test<br>public void testSend() throws InterruptedException {<br>    String msg = “hello, Spring boot amqp”;<br>    // 指定发送到那个交换机，指定routingKey为a.b<br>    this.amqpTemplate.convertAndSend(“spring.test.exchange”,”a.b”, msg);<br>    // 等待10秒后再结束<br>    Thread.sleep(10000);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">启动测试类，在启动测试类的时候，就是初始化spring容器，消费者就会被加载，能够接受消息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一，RabbitMQ的介绍与安装&quot;&gt;&lt;a href=&quot;#一，RabbitMQ的介绍与安装&quot; class=&quot;headerlink&quot; title=&quot;一，RabbitMQ的介绍与安装&quot;&gt;&lt;/a&gt;一，RabbitMQ的介绍与安装&lt;/h2&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;​            RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议 来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布 /订阅）、可靠性、安全。AMQP协议更多用在企业系统内，对数据_致 性、稳定性和可靠性要求很髙的场景，对性能和吞吐量的要求还在其次。&lt;/p&gt;
    
    </summary>
    
    
      <category term="主流框架" scheme="http://yoursite.com/categories/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>redis学习与提升</title>
    <link href="http://yoursite.com/kawyang/42bd15f0.html"/>
    <id>http://yoursite.com/kawyang/42bd15f0.html</id>
    <published>2020-04-24T03:38:04.000Z</published>
    <updated>2020-04-28T10:11:19.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="五种常用的基本数据类型"><a href="#五种常用的基本数据类型" class="headerlink" title="五种常用的基本数据类型"></a>五种常用的基本数据类型</h3><p>​        <strong>string</strong>:字符串类型  –》string   基本数据</p><p>​        <strong>hash</strong>:对应hash表类型  –》hashmap  对象</p><p>​        <strong>list</strong>:对应有序列表类型 –》 linkedlist  列表</p><p>​        <strong>set</strong>:对应不可重复类型–》hashset 去重 </p><a id="more"></a><p>​        <strong>sorted_set</strong>:排序列表   –》treemap 排序</p><h3 id="string类型的基本操作"><a href="#string类型的基本操作" class="headerlink" title="string类型的基本操作"></a>string类型的基本操作</h3><p>​        get key //根据key获取value</p><p>​        set key value  //写入一对数据</p><p>​        del key //删除但前key对应数据</p><p>​        mset key1 value1 key2 value2 //批量添加数据</p><p>​        mget key1 key2 //获取多个数据</p><p>​        strlen key //获取value长度</p><p>​        append key value //追加信息如果该key存在就追加不存在就新建</p><p>​        incr key //对该key的value进行+1</p><p>​        incrby key increment //对该key 的value进行增加指定的值</p><p>​        incrbyfloat key increment //对该key 的value进行增加指定的小数值</p><p>​        decr key  //对该key的value进行-1</p><p>​        decrby key increment //对该key 的value进行减少指定的值</p><p>​        setex key seconds value //设置生命周期存活周期 时间单位为秒</p><p>​        psetex key milliseconds value //设置生命周期存活周期 时间单位为毫秒</p><h3 id="hash类型的基本操作"><a href="#hash类型的基本操作" class="headerlink" title="hash类型的基本操作"></a>hash类型的基本操作</h3><p>​        hget key  field //根据key获取value</p><p>​        hset key field  value  //写入一对数据</p><p>​        hdel key  field  //删除但前key对应数据</p><p>​        hgetall key //获取但前key下所有数据</p><p>​        hmset key1 field1 value1 field2 value2 //批量添加数据</p><p>​        hmget key1 field1 field2 //获取多个数据</p><p>​        hlen key //获取哈希表中字段的数量</p><p>​        hexists key  field //获取哈希表中是否存在该字段</p><p>​        hkeys key //获取当前哈希表中所有字段名</p><p>​        hvalue key //获取当前哈希表中所有字段值</p><p>​        hincrby key field increment //设置指定字段增加范围内的值</p><p>​        hincrbyfloat key field increment //增加指定范围内的小数值</p><p>​        hsetnx key field value //判断是否存在 存在则放弃 不存在则添加</p><h3 id="list类型的基本操作"><a href="#list类型的基本操作" class="headerlink" title="list类型的基本操作"></a>list类型的基本操作</h3><p>​        lpush key value1 value2 //从左边添加数据</p><p>​        rpush key value1 value2 //从右边添加数据</p><p>​        lrange key start stop //获取数据从第几位获取到第几位</p><p>​        lindex key index //获取但前索引位数据</p><p>​        llen key //获取当前list的长度</p><p>​        lpop key // 从左边移除数据</p><p>​        rpop key // 从右边移除数据</p><p>​        blpop key1 key2 timeout //从左边获取当前key1值 如果获取不到会等待timeout秒</p><p>​        brpop key1 key2 timeout //从右边获取当前key1值 如果获取不到会等待timeout秒</p><p>​        lrem key count value  //移除指定数据  count 移除多少个</p><h3 id="set类型的基本操作"><a href="#set类型的基本操作" class="headerlink" title="set类型的基本操作"></a>set类型的基本操作</h3><p>​        sadd key member1 member2//增加数据</p><p>​        smembers key //查看当前key 下所有数据</p><p>​        srem key member1 member2 //删除数据</p><p>​        scard key //获取集合大小</p><p>​        sismember key member //判断set中是否存在指定数据</p><p>​        srandmember key count //随机获取指定个数数据</p><p>​        spop key //随机获取集合中的某个数据然后进行移除</p><p>​        sinter key1 key2 //获取两个集合的交集  也就是重复那部分数据</p><p>​        sunion key1 key2 //获取俩个集合的并集 也就是类似于连个集合去重</p><p>​        sdiff key1 key2 //获取key1 对key2的差值 也就是key1中有key2 中没有</p><p>​        sinterstore destination key1 key2 //获取交集并赋值到某个集合</p><p>​        sunionstore destination key1 key2 //获取并集并赋值到某个集合</p><p>​        sdiffstore destination key1 key2 //获取差集并赋值到某个集合</p><p>​        smove source destination member //将数据从source 移动到member 中</p><h3 id="sorted-set类型的基本操作"><a href="#sorted-set类型的基本操作" class="headerlink" title="sorted_set类型的基本操作"></a>sorted_set类型的基本操作</h3><p>​        zadd key score1 member1 // 增加数据 score 需要排序的行</p><p>​        zrange key start stop withscores //获取一段数据 加with scores 则显示member1</p><p>​        zrevrange key start stop withscores //获取一段数据反转并反转展示</p><p>​        zrem key member member //删除数据 根据key 与member</p><p>​        zrangebyscore key min max withscores limit  //获取数据 数据大小在min 和max之间</p><p>​        zrevrangebyscore key max min //获取数据并反转</p><p>​        zremrangebyrank key start stop //删除数据 从多少位到多少位</p><p>​        zremrangebyscore key min max //删除数据数据大小为 min 到max</p><p>​        zcard key  //获取数据总量</p><p>​        zcount key min max //获取数据总量按数据大小</p><p>​        zinterstore destination numkeys key key //获取交集并赋值给destination </p><p>​        zunionstore destination   numkeys  key key  //获取数据并集并赋值给destination   </p><p>​    </p><h3 id="通用操作指令"><a href="#通用操作指令" class="headerlink" title="通用操作指令"></a>通用操作指令</h3><p>expire key secods //为key设置有效期 秒值</p><p>pexpire key milliseconds //为key设置有效期 毫秒值</p><p>ttl key //获取key的有效时间</p><p>type key // 获取key 的类型</p><p>persist key //转换key为永久存活</p><p>keys pattern//搜索存在的key * 代表所有 ？代表单个字符</p><p>rename key newkey //改名</p><p>renamenx key newkey//不存在则改名</p><p> sort //对集合数据进行排序 但是不动元数据</p><h3 id="数据库通用指令"><a href="#数据库通用指令" class="headerlink" title="数据库通用指令"></a>数据库通用指令</h3><p>redis 为了避免数据重复一共把数据库分为了16个</p><p>select index //切换数据库  索引为0-15</p><p>move key db //移动数据到其他数据库</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>概念：持久化顾名思义就是把数据从内存中永久保存到硬盘中，然后每一次使用再从硬盘中读取到内存中。</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>使用RDB持久化语句</p><p>​         <strong>save</strong> </p><p>每执行一次就会保存一次快照信息</p><p>因为redis 是单线程的执行任务是一条条执行的，使用save</p><p>的时候可以会因为数据量过大而造成线程阻塞，所以线上环境不建议使用</p><p>所以这时候就要使用</p><p>​        <strong>bgsave</strong> </p><p>后台保存指令 他还调用fork函数生成一个子进程去生成快照文件</p><p>在配置文件中配置自动保存 </p><p><strong>save 多少秒时间 多少个发生变化</strong> </p><p>也就是说在一段时间内 如果有设定多少个线程发生了变化则会自动保存</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>aof存储与rdb的不同之处在于rdb记录数据快照，而AOF记录操作的步骤</p><p>需要数据恢复时只需要执行一遍指令即可恢复</p><p>always（每次存储一次）</p><p>​    数据没有误差，但是性能差</p><p>everysec(每秒存储)</p><p>​    每隔一秒对缓冲区的指令进行保存一次</p><p>no(系统控制)</p><p>​    又操作系统控制  不可控</p><p><strong>配置</strong></p><p>appendonly   yes|no  //是否开启</p><p>appendfsync  always|everysec|no  //持久化策略</p><p><strong>AOF重写</strong> </p><p>在很多时候AOF保存的操作中可能会有重复内容出现 从而对数据量大的情况下不太好维护</p><p>所以可以使用AOF重写的方式去优化语句 使得语句更加简便 AOF文件也会更加小巧</p><p>bgrewriteaof  //手动重写</p><p>auto-aof-rewrite-min-size size  //自动重写</p><p>auto-aof-rewrite-percentage  percentage  //自动重写</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>multi  //事务开始  </p><p>exec //事务结束</p><p>discard //取消事务</p><p>作用： 在执行了multi后执行语句就不再执行 而是往一个队列里面添加 在使用了exec后才一同执行</p><p>事务锁 ：</p><p>​    为了保护数据在并发操作上不会出错，</p><p>​        watch //监控数据 必须定义在开启事务之前</p><p>​        unwatch //取消监控数据</p><p>​    如果监控的数据发生变化 则立即取消事务  </p><p>分布式锁：</p><p>​    setnx lock-key value</p><p>​    如果有线程在使用时其他线程不能使用</p><p>​    操作完成后可以通过del来释放锁 可以使用定时数据有效时间来摧毁锁</p><h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><p><strong>定时删除</strong></p><p>​    设置一个定时器 监控expire中的元素如果有元素到达过期时间就会立马删除掉</p><p>​    优点节约服务器内存 缺点因为会占用队列 所以会影响cpu性能 </p><p><strong>惰性删除</strong></p><p>就是在一个元素达到过期时间时如果但是服务器压力过高那么服务器则不会去立马删除</p><p>等到下次去获取这个元素时再对数据进行删除 </p><p>优点节约cpu性能 缺点会多占用内存空间</p><p><strong>定期删除</strong></p><p>每隔一段时间对内存中的数据进行一次随机抽查 如果抽查到25%的数据都已过期则再重新抽查一遍</p><p>把抽查到的过期数据进行删除</p><p>是一个比较居中的方案 不是很吃cpu也不是很吃内存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;h3 id=&quot;五种常用的基本数据类型&quot;&gt;&lt;a href=&quot;#五种常用的基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;五种常用的基本数据类型&quot;&gt;&lt;/a&gt;五种常用的基本数据类型&lt;/h3&gt;&lt;p&gt;​        &lt;strong&gt;string&lt;/strong&gt;:字符串类型  –》string   基本数据&lt;/p&gt;&lt;p&gt;​        &lt;strong&gt;hash&lt;/strong&gt;:对应hash表类型  –》hashmap  对象&lt;/p&gt;&lt;p&gt;​        &lt;strong&gt;list&lt;/strong&gt;:对应有序列表类型 –》 linkedlist  列表&lt;/p&gt;&lt;p&gt;​        &lt;strong&gt;set&lt;/strong&gt;:对应不可重复类型–》hashset 去重 &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HashMap底层学习</title>
    <link href="http://yoursite.com/kawyang/a2777b58.html"/>
    <id>http://yoursite.com/kawyang/a2777b58.html</id>
    <published>2020-04-21T01:12:26.000Z</published>
    <updated>2020-04-21T07:32:59.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-什么是哈希表"><a href="#一-什么是哈希表" class="headerlink" title="一. 什么是哈希表"></a>一. 什么是哈希表</h3><p><strong><em>其他数据结构</em></strong></p><p><strong>数组：</strong></p><p>​        采用一段连续的存储单元来存储数据。对于指定下标的查找，比较简单，通过给定一个数据进行查找需要遍历数组进行对比，比较麻烦，对于一般的删除插入操作，涉及到了数组元素的移动，也比较麻烦。</p><p><strong>线性链表：</strong></p><p>​        链表的新增修改删除，只需处理结点间的引用即可，比较简单，但是查询需要遍历整个链表进行逐一比较查询，比较麻烦</p><a id="more"></a><p><strong>二叉树</strong>：<br>        对一棵相对平衡的有序二叉树，对其进行插入，查找，删除等操作，平均复杂度均为二次方倍数。</p><blockquote><p><strong>哈希表：</strong></p></blockquote><p>​        相比上述几种数据结构，在哈希表中进行添加，删除，查找等操作，性能十分之高，不考虑哈希冲突的情况下，仅需一次定位即可完成，就是无论多少数据哈希表也只需要一次计算便可得到元素位置。</p><p>​        哈希表的底层结构是数组，正是利用了数组根据下标查找某个元素，一次定位就可以达到这种特性，哈希表将要存储的关键字计算出哈希值然后再让哈希值对应着数组某个位置进行插入。</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20200227144714446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BfRG9yYWVtb24=,size_16,color_FFFFFF,t_70"></p><p><strong>哈希冲突</strong></p><p>​        两个不同的元素有可能会计算出同样的哈希值，指向同一地址的，这种情况被称为哈希冲突，那么哈希冲突如何解决呢？哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是数组+链表的方式。</p><h3 id="二、HashMap实现原理"><a href="#二、HashMap实现原理" class="headerlink" title="二、HashMap实现原理"></a>二、HashMap实现原理</h3><p>HashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap的主干数组，可以看到就是一个Entry数组，初始值为空数组&#123;&#125;，主干数组的长度一定是2的次幂。</span></span><br><span class="line"><span class="comment">//至于为什么这么做，后面会有详细分析。</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br></pre></td></tr></table></figure><p>Entry是HashMap中的一个静态内部类。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> K key;</span><br><span class="line">       V value;</span><br><span class="line">       Entry&lt;K,V&gt; next;<span class="comment">//存储指向下一个Entry的引用，单链表结构</span></span><br><span class="line">       <span class="keyword">int</span> hash;<span class="comment">//对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Creates new entry.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">           value = v;</span><br><span class="line">           next = n;</span><br><span class="line">           key = k;</span><br><span class="line">           hash = h;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果存在链表则需要先获取但前hash对应的数组位置，然后获取数组下的链表，对链表进行遍历比较找到对应的元素。对于添加则是先计算出key的hash值然后在判断但前hash值对应位置是否有无链表，如果有链表则获取遍历链表，再判断有无但前元素对应的key有则覆盖，无则添加到链表尾端。</strong></p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20200227145910227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BfRG9yYWVtb24=,size_16,color_FFFFFF,t_70"></p><p>put操作的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果table数组为空数组&#123;&#125;，进行数组填充（为table分配实际内存空间），入参为threshold，此时threshold为initialCapacity 默认是1&lt;&lt;4(24=16)</span></span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//如果key为null，存储位置为table[0]或table[0]的冲突链上</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);<span class="comment">//对key的hashcode进一步计算，确保散列均匀</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//获取在table中的实际位置</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="comment">//如果该对应数据已存在，执行覆盖操作。用新value替换旧value，并返回旧value</span></span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;<span class="comment">//保证并发访问时，若HashMap内部结构发生变化，快速响应失败</span></span><br><span class="line">        addEntry(hash, key, value, i);<span class="comment">//新增一个entry</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">inflateTable这个方法用于为主干数组table在内存中分配存储空间，通过roundUpToPowerOf2(toSize)可以确保capacity为大于或等于toSize的最接近toSize的二次幂，比如toSize=13,则capacity=16;to_size=16,capacity=16;to_size=17,capacity=32.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);<span class="comment">//capacity一定是2的次幂</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//此处为threshold赋值，取capacity*loadFactor和MAXIMUM_CAPACITY+1的最小值</span></span><br><span class="line">        <span class="comment">//capaticy一定不会超过MAXIMUM_CAPACITY，除非loadFactor大于1</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">roundUpToPowerOf2中的这段处理使得数组长度一定为2的次幂，Integer.highestOneBit是用来获取最左边的bit（其他bit位为0）所代表的数值.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert number &gt;= 0 : "number must be non-negative";</span></span><br><span class="line">        <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</span><br><span class="line">                ? MAXIMUM_CAPACITY</span><br><span class="line">                : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这是一个神奇的函数，用了很多的异或，移位等运算，</span></span><br><span class="line"><span class="comment">//对key的hashcode进一步进行计算以及二进制位的调整等来保证最终获取的存储位置尽量分布均匀</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回数组下标 确定数组位置</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终存储位置确认流程</strong></p><p>​    先获取key的hash值，然后通过hash方法运算计算出最适合集合的hash值, 在通过index for 方法以 h &amp; (length-1); 的方式确定key在数组中的位置，然后进行存储。如果元素为null则确立下标为0.</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20200227153620930.png"></p><p><strong>为什么每次扩容都是2的次幂</strong></p><p>因为便于计算下标位置，每次都为2的次方则每次扩容都是将二进制位往前移动了一位的意思，所以在技术存储位置时length-1 则是把除了首位的位置全部变成了1，这样在与hash值进行&amp;计算时更加的方便准确，分布也会更加均匀。减少碰撞几率，增加查询效率。</p><p><strong>get方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">　　　　 <span class="comment">//如果key为null,则直接去table[0]处去检索即可。</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//get方法通过key值返回对应value，如果key为null，直接去table[0]处检索。我们再看一下getEntry这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过key的hashcode值计算hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="comment">//indexFor (hash&amp;length-1) 获取最终数组索引，然后遍历链表，通过equals方法比对找出对应记录</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出，get方法的实现相对简单，key(hashcode)–&gt;hash–&gt;indexFor–&gt;最终索引位置，找到对应位置table[i]，再查看是否有链表，遍历链表，通过key的equals方法比对查找对应的记录。要注意的是，有人觉得上面在定位到数组位置之后然后遍历链表的时候，e.hash == hash这个判断没必要，仅通过equals判断就可以。其实不然，试想一下，如果传入的key对象重写了equals方法却没有重写hashCode，而恰巧此对象定位到这个数组位置，如果仅仅用equals判断可能是相等的，但其hashCode和当前对象不一致，这种情况，根据Object的hashCode的约定，不能返回当前对象，而应该返回null。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-什么是哈希表&quot;&gt;&lt;a href=&quot;#一-什么是哈希表&quot; class=&quot;headerlink&quot; title=&quot;一. 什么是哈希表&quot;&gt;&lt;/a&gt;一. 什么是哈希表&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;其他数据结构&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数组：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​        采用一段连续的存储单元来存储数据。对于指定下标的查找，比较简单，通过给定一个数据进行查找需要遍历数组进行对比，比较麻烦，对于一般的删除插入操作，涉及到了数组元素的移动，也比较麻烦。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;线性链表：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​        链表的新增修改删除，只需处理结点间的引用即可，比较简单，但是查询需要遍历整个链表进行逐一比较查询，比较麻烦&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
